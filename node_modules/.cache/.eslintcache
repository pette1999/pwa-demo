[{"/Users/peterchen/Dropbox/Hexlink/pwa-demo/src/index.tsx":"1","/Users/peterchen/Dropbox/Hexlink/pwa-demo/src/reportWebVitals.ts":"2","/Users/peterchen/Dropbox/Hexlink/pwa-demo/src/App.tsx":"3","/Users/peterchen/Dropbox/Hexlink/pwa-demo/src/layouts/register.tsx":"4","/Users/peterchen/Dropbox/Hexlink/pwa-demo/src/layouts/landing.tsx":"5","/Users/peterchen/Dropbox/Hexlink/pwa-demo/src/layouts/signedIn.tsx":"6","/Users/peterchen/Dropbox/Hexlink/pwa-demo/src/redux-functionality/index.tsx":"7","/Users/peterchen/Dropbox/Hexlink/pwa-demo/src/redux-functionality/slices/userAccountsSlice.tsx":"8","/Users/peterchen/Dropbox/Hexlink/pwa-demo/src/components/shared.tsx":"9","/Users/peterchen/Dropbox/Hexlink/pwa-demo/src/utils/generators/randomString.tsx":"10","/Users/peterchen/Dropbox/Hexlink/pwa-demo/src/utils/passkey/register/validatePassKeyCreation.tsx":"11","/Users/peterchen/Dropbox/Hexlink/pwa-demo/src/utils/passkey/register/createPasskeyCredential.tsx":"12","/Users/peterchen/Dropbox/Hexlink/pwa-demo/src/utils/passkey/authenticate/getPasskeyCredential.tsx":"13","/Users/peterchen/Dropbox/Hexlink/pwa-demo/src/utils/passkey/authenticate/verifyUserId.tsx":"14","/Users/peterchen/Dropbox/Hexlink/pwa-demo/src/utils/passkey/authenticate/verifyClientData.tsx":"15","/Users/peterchen/Dropbox/Hexlink/pwa-demo/src/utils/passkey/authenticate/validatePassKey.tsx":"16","/Users/peterchen/Dropbox/Hexlink/pwa-demo/src/types/redux/userAccount.tsx":"17","/Users/peterchen/Dropbox/Hexlink/pwa-demo/src/utils/passkey/shared/parseClientData.tsx":"18"},{"size":727,"mtime":1698349752156,"results":"19","hashOfConfig":"20"},{"size":425,"mtime":1698349752157,"results":"21","hashOfConfig":"20"},{"size":1241,"mtime":1698349752155,"results":"22","hashOfConfig":"20"},{"size":4001,"mtime":1698354721761,"results":"23","hashOfConfig":"20"},{"size":4244,"mtime":1698349752156,"results":"24","hashOfConfig":"20"},{"size":273,"mtime":1698349752156,"results":"25","hashOfConfig":"20"},{"size":443,"mtime":1698349752157,"results":"26","hashOfConfig":"20"},{"size":1139,"mtime":1698349752157,"results":"27","hashOfConfig":"20"},{"size":624,"mtime":1698349752155,"results":"28","hashOfConfig":"20"},{"size":290,"mtime":1698349752158,"results":"29","hashOfConfig":"20"},{"size":1279,"mtime":1698349752158,"results":"30","hashOfConfig":"20"},{"size":2098,"mtime":1698354703243,"results":"31","hashOfConfig":"20"},{"size":495,"mtime":1698349752158,"results":"32","hashOfConfig":"20"},{"size":626,"mtime":1698349752158,"results":"33","hashOfConfig":"20"},{"size":784,"mtime":1698349752158,"results":"34","hashOfConfig":"20"},{"size":190,"mtime":1698349752158,"results":"35","hashOfConfig":"20"},{"size":240,"mtime":1698349752157,"results":"36","hashOfConfig":"20"},{"size":452,"mtime":1698349752159,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},"6oh718",{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"41"},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"41"},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"41"},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78"},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"41"},{"filePath":"86","messages":"87","suppressedMessages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"41"},{"filePath":"90","messages":"91","suppressedMessages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"41"},{"filePath":"94","messages":"95","suppressedMessages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"97","messages":"98","suppressedMessages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},"/Users/peterchen/Dropbox/Hexlink/pwa-demo/src/index.tsx",[],[],[],"/Users/peterchen/Dropbox/Hexlink/pwa-demo/src/reportWebVitals.ts",[],[],"/Users/peterchen/Dropbox/Hexlink/pwa-demo/src/App.tsx",[],[],"/Users/peterchen/Dropbox/Hexlink/pwa-demo/src/layouts/register.tsx",[],[],"/Users/peterchen/Dropbox/Hexlink/pwa-demo/src/layouts/landing.tsx",["100","101"],[],"import React, { useState } from \"react\";\nimport { Container, SignInButton, Copy, UserName } from \"components/shared\";\nimport getPasskeyCredential from \"utils/passkey/authenticate/getPasskeyCredential\";\nimport parseClientData from \"utils/passkey/shared/parseClientData\";\nimport UserAccount from \"types/passkey/userAccount\";\n\nimport verifyUserId from \"utils/passkey/authenticate/verifyUserId\";\nimport verifyClientData from \"utils/passkey/authenticate/verifyClientData\";\n\nimport store, { RootState } from \"redux-functionality/index\";\nimport { useSelector } from \"react-redux\";\n\ninterface Props {\n  onRegister: () => void;\n  onSignIn: () => void;\n}\n\n// markup\nconst Landing = ({ onRegister, onSignIn }: Props) => {\n  const [username, setUsername] = useState<string>(\"\");\n\n  const userAccounts: Array<UserAccount> = useSelector(\n    (state: RootState) => state.userAccounts.accounts\n  );\n\n  const onUserNameChanged = (ev: React.ChangeEvent<HTMLInputElement>) => {\n    setUsername(ev.target.value);\n  };\n\n  // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n  // MARK: THIS SHOULD BE DONE ON THE BACKEND\n  // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n  /*\n      This functionality gathers the user account requested,\n      this should be gathered via an API call to the backend.\n  */\n\n  const getUserAccount = () => {\n    if (userAccounts === undefined) {\n      return null;\n    }\n\n    const match = userAccounts.filter(\n      (item) => item.username.toLowerCase() === username.toLowerCase()\n    );\n\n    if (match.length > 0) {\n      return match[0];\n    } else {\n      return null;\n    }\n  };\n\n  const performLogin = async (challenge: string) => {\n    console.log(\"⚈ ⚈ ⚈ performLogin ⚈ ⚈ ⚈\");\n    try {\n      const credential = await getPasskeyCredential(challenge);\n      console.log(\" performLogin ✅ credential : \", credential);\n      return credential;\n    } catch (error) {\n      console.log(\n        \"performLogin ❌  Failed to get credential with error : \",\n        error\n      );\n      return null;\n    }\n  };\n\n  const signIn = async () => {\n    console.log(\"⚈ ⚈ ⚈ signIn ⚈ ⚈ ⚈\");\n    // Get the account related to the username.\n    // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n    // MARK: THIS SHOULD BE DONE ON THE BACKEND\n    // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n    const userAccount = getUserAccount();\n    console.log(\"⚈ ⚈ ⚈ getUserAccount ⚈ ⚈ ⚈\");\n    if (userAccount !== null) {\n      console.log(\n        \"Get User Account ✅ There is a match for that username : \",\n        userAccount\n      );\n      // Login with the details.\n      // This part remains on the front-end in production.\n      const credential = await performLogin(userAccount.challengeBuffer);\n\n      if (credential !== null) {\n        // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n        // MARK: THIS SHOULD BE DONE ON THE BACKEND\n        // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n        /*\n          This functionality confirms that theres a credentials are valid\n          and that they match the details related to the users account.\n        */\n        switch (verifyUserId(credential, userAccount.userId)) {\n          case true:\n            switch (verifyClientData(credential, userAccount)) {\n              case true:\n                console.log(\"✅ You have succesfully logged in.\");\n                onSignIn();\n                break;\n              case false:\n                console.log(\"❌ The challenge does not match.\");\n                break;\n            }\n            break;\n          case false:\n            break;\n        }\n      } else {\n        console.log(\n          \" signIn ❌ Failed to perform Login as credential does not exist.\"\n        );\n      }\n    } else {\n      console.log(\" signIn ❌ There is no match for that username.\");\n    }\n  };\n\n  return (\n    <Container>\n      <UserName\n        placeholder={\"Please enter your email\"}\n        type={\"text\"}\n        autoComplete={\"username webauthn\"}\n        value={username}\n        onChange={onUserNameChanged}\n      />\n      <SignInButton onClick={signIn}> Sign In</SignInButton>\n      <Copy>Not Created an Account ?</Copy>\n      <SignInButton onClick={onRegister}>Register</SignInButton>\n    </Container>\n  );\n};\n\nexport default Landing;\n","/Users/peterchen/Dropbox/Hexlink/pwa-demo/src/layouts/signedIn.tsx",["102"],[],"import React from \"react\";\nimport { Container, Copy } from \"components/shared\";\ninterface Props {}\n\n// markup\nconst SignedIn = ({}: Props) => {\n  return (\n    <Container>\n      <Copy>You have succesfully signed in!</Copy>\n    </Container>\n  );\n};\n\nexport default SignedIn;\n","/Users/peterchen/Dropbox/Hexlink/pwa-demo/src/redux-functionality/index.tsx",[],[],"/Users/peterchen/Dropbox/Hexlink/pwa-demo/src/redux-functionality/slices/userAccountsSlice.tsx",[],[],"/Users/peterchen/Dropbox/Hexlink/pwa-demo/src/components/shared.tsx",[],[],"/Users/peterchen/Dropbox/Hexlink/pwa-demo/src/utils/generators/randomString.tsx",[],[],"/Users/peterchen/Dropbox/Hexlink/pwa-demo/src/utils/passkey/register/validatePassKeyCreation.tsx",["103"],[],"import PassKeyClientData from \"types/passkey/passKeyClientData\";\nimport parseClientData from \"utils/passkey/shared/parseClientData\";\nimport PassKeyClientDataValidation from \"types/passkey/passKeyClientDataValidation\";\n\nconst validatePassKeyCreation = (credential: Credential): string | null => {\n  const clientDataValidation = validateClientData(credential);\n  switch (clientDataValidation.valid) {\n    case true:\n      return clientDataValidation.challenge;\n    case false:\n      return null;\n  }\n};\n\nconst validateClientData = (\n  credential: Credential\n): PassKeyClientDataValidation => {\n  // @ts-ignore\n  // Gather the Client Data\n  const clientData = parseClientData(credential.response.clientDataJSON);\n  console.log(\"✅  Gathered Client Data: \", clientData);\n  if (clientData.origin !== process.env.REACT_APP_ORIGIN) {\n    console.log(\"❌  Origin does not match!\");\n    return {\n      valid: false,\n      challenge: null,\n    };\n  } else if (clientData.type !== \"webauthn.create\") {\n    console.log(\"❌  Type does not match webauthn.create\");\n    return {\n      valid: false,\n      challenge: null,\n    };\n  }\n  console.log(\"✅  Client Data is Valid\");\n  return {\n    valid: true,\n    challenge: clientData.challenge,\n  };\n};\n\nexport default validatePassKeyCreation;\n","/Users/peterchen/Dropbox/Hexlink/pwa-demo/src/utils/passkey/register/createPasskeyCredential.tsx",["104"],[],"import React from \"react\";\n\nconst CreatePassKeyCredential = async (\n  username: string,\n  challengeBufferString: string,\n  userId: string\n) => {\n  /*\n    The challenge is a buffer of randomly generated bytes with a minimum of 16 bytes. \n    This is generated on the server using a cryptographically secure random number generator. \n    By generating the challenge on the server we can prevent \"replay attacks\". \n    The authenticator will sign this along with other data.\n  */\n  const challengeBuffer = Uint8Array.from(\n    challengeBufferString as string,\n    (c) => c.charCodeAt(0)\n  );\n\n  const userIdBuffer = Uint8Array.from(userId, (c) => c.charCodeAt(0));\n\n  const publicKeyCredentialCreationOptions: PublicKeyCredentialCreationOptions =\n    {\n      challenge: challengeBuffer,\n      rp: {\n        name: process.env.REACT_APP_RP_NAME as string,\n        id: process.env.REACT_APP_DOMAIN,\n      },\n      user: {\n        id: userIdBuffer,\n        name: username,\n        displayName: username,\n      },\n      // SUPPORT ALL PASSKEYS\n      pubKeyCredParams: [\n        {\n          type: \"public-key\",\n          alg: -7,\n        },\n        {\n          type: \"public-key\",\n          alg: -35,\n        },\n        {\n          type: \"public-key\",\n          alg: -36,\n        },\n        {\n          type: \"public-key\",\n          alg: -257,\n        },\n        {\n          type: \"public-key\",\n          alg: -258,\n        },\n        {\n          type: \"public-key\",\n          alg: -259,\n        },\n        {\n          type: \"public-key\",\n          alg: -37,\n        },\n        {\n          type: \"public-key\",\n          alg: -38,\n        },\n        {\n          type: \"public-key\",\n          alg: -39,\n        },\n        {\n          type: \"public-key\",\n          alg: -8,\n        },\n      ],\n      timeout: 15000,\n      attestation: \"direct\",\n    };\n\n  console.log(\n    \"✅  publicKeyCredentialCreationOptions : \",\n    publicKeyCredentialCreationOptions\n  );\n\n  return await navigator.credentials.create({\n    publicKey: publicKeyCredentialCreationOptions,\n  });\n};\n\nexport default CreatePassKeyCredential;\n","/Users/peterchen/Dropbox/Hexlink/pwa-demo/src/utils/passkey/authenticate/getPasskeyCredential.tsx",[],[],"/Users/peterchen/Dropbox/Hexlink/pwa-demo/src/utils/passkey/authenticate/verifyUserId.tsx",["105"],[],"import React from \"react\";\n\nconst verifyUserId = (credential: Credential, userId: string): boolean => {\n  console.log(\"⚈ ⚈ ⚈ Verifying UserId ⚈ ⚈ ⚈\");\n  const utf8Decoder = new TextDecoder(\"utf-8\");\n\n  const decodedUserHandle = utf8Decoder.decode(\n    // @ts-ignore\n    credential.response.userHandle\n  );\n  console.log(\"✅ decodedUserHandle : \", decodedUserHandle);\n\n  if (decodedUserHandle !== userId) {\n    console.log(\"❌ The userId does not match. Failed Login.\");\n    return false;\n  } else {\n    console.log(\"✅  Verified UserId\");\n    // @ts-ignore\n    return true;\n  }\n};\n\nexport default verifyUserId;\n","/Users/peterchen/Dropbox/Hexlink/pwa-demo/src/utils/passkey/authenticate/verifyClientData.tsx",["106"],[],"import React from \"react\";\nimport UserAccount from \"types/passkey/userAccount\";\nimport validatePassKey from \"./validatePassKey\";\nimport parseClientData from \"../shared/parseClientData\";\n\nconst verifyClientData = (\n  credential: Credential,\n  userAccount: UserAccount\n): boolean => {\n  //@ts-ignore\n  let clientData = parseClientData(credential.response.clientDataJSON);\n  if (clientData !== null) {\n    console.log(\"✅ We have performed the login.\");\n    console.log(\"✅ clientData : \", clientData);\n    console.log(\"⚈ ⚈ ⚈ Verifying Challenge ⚈ ⚈ ⚈\");\n    return validatePassKey(userAccount.challenge, clientData.challenge);\n  } else {\n    console.log(\"❌ Failed to perform Login. Client data json is null.\");\n    return false;\n  }\n};\n\nexport default verifyClientData;\n","/Users/peterchen/Dropbox/Hexlink/pwa-demo/src/utils/passkey/authenticate/validatePassKey.tsx",["107"],[],"import React from \"react\";\n\nconst validatePassKey = (storedChallenge: string, clientChallenge: string) => {\n  return storedChallenge === clientChallenge;\n};\n\nexport default validatePassKey;\n","/Users/peterchen/Dropbox/Hexlink/pwa-demo/src/types/redux/userAccount.tsx",[],[],"/Users/peterchen/Dropbox/Hexlink/pwa-demo/src/utils/passkey/shared/parseClientData.tsx",[],[],{"ruleId":"108","severity":1,"message":"109","line":4,"column":8,"nodeType":"110","messageId":"111","endLine":4,"endColumn":23},{"ruleId":"108","severity":1,"message":"112","line":10,"column":8,"nodeType":"110","messageId":"111","endLine":10,"endColumn":13},{"ruleId":"113","severity":1,"message":"114","line":6,"column":19,"nodeType":"115","messageId":"116","endLine":6,"endColumn":28},{"ruleId":"108","severity":1,"message":"117","line":1,"column":8,"nodeType":"110","messageId":"111","endLine":1,"endColumn":25},{"ruleId":"108","severity":1,"message":"118","line":1,"column":8,"nodeType":"110","messageId":"111","endLine":1,"endColumn":13},{"ruleId":"108","severity":1,"message":"118","line":1,"column":8,"nodeType":"110","messageId":"111","endLine":1,"endColumn":13},{"ruleId":"108","severity":1,"message":"118","line":1,"column":8,"nodeType":"110","messageId":"111","endLine":1,"endColumn":13},{"ruleId":"108","severity":1,"message":"118","line":1,"column":8,"nodeType":"110","messageId":"111","endLine":1,"endColumn":13},"@typescript-eslint/no-unused-vars","'parseClientData' is defined but never used.","Identifier","unusedVar","'store' is defined but never used.","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","'PassKeyClientData' is defined but never used.","'React' is defined but never used."]