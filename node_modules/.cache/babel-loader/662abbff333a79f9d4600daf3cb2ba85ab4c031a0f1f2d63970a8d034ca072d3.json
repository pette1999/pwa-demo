{"ast":null,"code":"import * as asn1js from \"asn1js\";\nimport { BufferSourceConverter } from \"pvtsutils\";\nexport class BitString {\n  constructor(params, unusedBits = 0) {\n    this.unusedBits = 0;\n    this.value = new ArrayBuffer(0);\n    if (params) {\n      if (typeof params === \"number\") {\n        this.fromNumber(params);\n      } else if (BufferSourceConverter.isBufferSource(params)) {\n        this.unusedBits = unusedBits;\n        this.value = BufferSourceConverter.toArrayBuffer(params);\n      } else {\n        throw TypeError(\"Unsupported type of 'params' argument for BitString\");\n      }\n    }\n  }\n  fromASN(asn) {\n    if (!(asn instanceof asn1js.BitString)) {\n      throw new TypeError(\"Argument 'asn' is not instance of ASN.1 BitString\");\n    }\n    this.unusedBits = asn.valueBlock.unusedBits;\n    this.value = asn.valueBlock.valueHex;\n    return this;\n  }\n  toASN() {\n    return new asn1js.BitString({\n      unusedBits: this.unusedBits,\n      valueHex: this.value\n    });\n  }\n  toSchema(name) {\n    return new asn1js.BitString({\n      name\n    });\n  }\n  toNumber() {\n    let res = \"\";\n    const uintArray = new Uint8Array(this.value);\n    for (const octet of uintArray) {\n      res += octet.toString(2).padStart(8, \"0\");\n    }\n    res = res.split(\"\").reverse().join(\"\");\n    if (this.unusedBits) {\n      res = res.slice(this.unusedBits).padStart(this.unusedBits, \"0\");\n    }\n    return parseInt(res, 2);\n  }\n  fromNumber(value) {\n    let bits = value.toString(2);\n    const octetSize = bits.length + 7 >> 3;\n    this.unusedBits = (octetSize << 3) - bits.length;\n    const octets = new Uint8Array(octetSize);\n    bits = bits.padStart(octetSize << 3, \"0\").split(\"\").reverse().join(\"\");\n    let index = 0;\n    while (index < octetSize) {\n      octets[index] = parseInt(bits.slice(index << 3, (index << 3) + 8), 2);\n      index++;\n    }\n    this.value = octets.buffer;\n  }\n}","map":{"version":3,"names":["asn1js","BufferSourceConverter","BitString","constructor","params","unusedBits","value","ArrayBuffer","fromNumber","isBufferSource","toArrayBuffer","TypeError","fromASN","asn","valueBlock","valueHex","toASN","toSchema","name","toNumber","res","uintArray","Uint8Array","octet","toString","padStart","split","reverse","join","slice","parseInt","bits","octetSize","length","octets","index","buffer"],"sources":["/Users/peterchen/Dropbox/Hexlink/pwa-demo/node_modules/@peculiar/asn1-schema/build/es2015/types/bit_string.js"],"sourcesContent":["import * as asn1js from \"asn1js\";\nimport { BufferSourceConverter } from \"pvtsutils\";\nexport class BitString {\n    constructor(params, unusedBits = 0) {\n        this.unusedBits = 0;\n        this.value = new ArrayBuffer(0);\n        if (params) {\n            if (typeof params === \"number\") {\n                this.fromNumber(params);\n            }\n            else if (BufferSourceConverter.isBufferSource(params)) {\n                this.unusedBits = unusedBits;\n                this.value = BufferSourceConverter.toArrayBuffer(params);\n            }\n            else {\n                throw TypeError(\"Unsupported type of 'params' argument for BitString\");\n            }\n        }\n    }\n    fromASN(asn) {\n        if (!(asn instanceof asn1js.BitString)) {\n            throw new TypeError(\"Argument 'asn' is not instance of ASN.1 BitString\");\n        }\n        this.unusedBits = asn.valueBlock.unusedBits;\n        this.value = asn.valueBlock.valueHex;\n        return this;\n    }\n    toASN() {\n        return new asn1js.BitString({ unusedBits: this.unusedBits, valueHex: this.value });\n    }\n    toSchema(name) {\n        return new asn1js.BitString({ name });\n    }\n    toNumber() {\n        let res = \"\";\n        const uintArray = new Uint8Array(this.value);\n        for (const octet of uintArray) {\n            res += octet.toString(2).padStart(8, \"0\");\n        }\n        res = res.split(\"\").reverse().join(\"\");\n        if (this.unusedBits) {\n            res = res.slice(this.unusedBits).padStart(this.unusedBits, \"0\");\n        }\n        return parseInt(res, 2);\n    }\n    fromNumber(value) {\n        let bits = value.toString(2);\n        const octetSize = (bits.length + 7) >> 3;\n        this.unusedBits = (octetSize << 3) - bits.length;\n        const octets = new Uint8Array(octetSize);\n        bits = bits.padStart(octetSize << 3, \"0\").split(\"\").reverse().join(\"\");\n        let index = 0;\n        while (index < octetSize) {\n            octets[index] = parseInt(bits.slice(index << 3, (index << 3) + 8), 2);\n            index++;\n        }\n        this.value = octets.buffer;\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}