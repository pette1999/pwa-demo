{"ast":null,"code":"import { Buffer } from 'buffer';\nexport function padString(input) {\n  var segmentLength = 4;\n  var stringLength = input.length;\n  var diff = stringLength % segmentLength;\n  if (!diff) {\n    return input;\n  }\n  var position = stringLength;\n  var padLength = segmentLength - diff;\n  var paddedStringLength = stringLength + padLength;\n  var buffer = Buffer.alloc(paddedStringLength);\n  buffer.write(input);\n  while (padLength--) {\n    buffer.write(\"=\", position++);\n  }\n  return buffer.toString();\n}","map":{"version":3,"names":["Buffer","padString","input","segmentLength","stringLength","length","diff","position","padLength","paddedStringLength","buffer","alloc","write","toString"],"sources":["/Users/peterchen/Dropbox/Hexlink/pwa-demo/src/utils/passkey/shared/pad_string_1.ts"],"sourcesContent":["import { Buffer } from 'buffer';\n\nexport function padString(input: string): string {\n  var segmentLength = 4;\n  var stringLength = input.length;\n  var diff = stringLength % segmentLength;\n  if (!diff) {\n    return input;\n  }\n  var position = stringLength;\n  var padLength = segmentLength - diff;\n  var paddedStringLength = stringLength + padLength;\n  var buffer = Buffer.alloc(paddedStringLength);\n  buffer.write(input);\n  while (padLength--) {\n    buffer.write(\"=\", position++);\n  }\n  return buffer.toString();\n}"],"mappings":"AAAA,SAASA,MAAM,QAAQ,QAAQ;AAE/B,OAAO,SAASC,SAASA,CAACC,KAAa,EAAU;EAC/C,IAAIC,aAAa,GAAG,CAAC;EACrB,IAAIC,YAAY,GAAGF,KAAK,CAACG,MAAM;EAC/B,IAAIC,IAAI,GAAGF,YAAY,GAAGD,aAAa;EACvC,IAAI,CAACG,IAAI,EAAE;IACT,OAAOJ,KAAK;EACd;EACA,IAAIK,QAAQ,GAAGH,YAAY;EAC3B,IAAII,SAAS,GAAGL,aAAa,GAAGG,IAAI;EACpC,IAAIG,kBAAkB,GAAGL,YAAY,GAAGI,SAAS;EACjD,IAAIE,MAAM,GAAGV,MAAM,CAACW,KAAK,CAACF,kBAAkB,CAAC;EAC7CC,MAAM,CAACE,KAAK,CAACV,KAAK,CAAC;EACnB,OAAOM,SAAS,EAAE,EAAE;IAClBE,MAAM,CAACE,KAAK,CAAC,GAAG,EAAEL,QAAQ,EAAE,CAAC;EAC/B;EACA,OAAOG,MAAM,CAACG,QAAQ,CAAC,CAAC;AAC1B"},"metadata":{},"sourceType":"module","externalDependencies":[]}