{"ast":null,"code":"const CreatePassKeyCredential = async (username, challengeBufferString, userId) => {\n  /*\n    The challenge is a buffer of randomly generated bytes with a minimum of 16 bytes. \n    This is generated on the server using a cryptographically secure random number generator. \n    By generating the challenge on the server we can prevent \"replay attacks\". \n    The authenticator will sign this along with other data.\n  */\n  const challengeBuffer = Uint8Array.from(challengeBufferString, c => c.charCodeAt(0));\n  const userIdBuffer = Uint8Array.from(userId, c => c.charCodeAt(0));\n  const publicKeyCredentialCreationOptions = {\n    challenge: challengeBuffer,\n    rp: {\n      name: process.env.REACT_APP_RP_NAME,\n      id: process.env.REACT_APP_DOMAIN\n    },\n    user: {\n      id: userIdBuffer,\n      name: username,\n      displayName: username\n    },\n    // SUPPORT ALL PASSKEYS\n    pubKeyCredParams: [{\n      type: \"public-key\",\n      alg: -7\n    }, {\n      type: \"public-key\",\n      alg: -35\n    }, {\n      type: \"public-key\",\n      alg: -36\n    }, {\n      type: \"public-key\",\n      alg: -257\n    }, {\n      type: \"public-key\",\n      alg: -258\n    }, {\n      type: \"public-key\",\n      alg: -259\n    }, {\n      type: \"public-key\",\n      alg: -37\n    }, {\n      type: \"public-key\",\n      alg: -38\n    }, {\n      type: \"public-key\",\n      alg: -39\n    }, {\n      type: \"public-key\",\n      alg: -8\n    }],\n    timeout: 15000,\n    attestation: \"direct\"\n  };\n  console.log(\"✅  publicKeyCredentialCreationOptions : \", publicKeyCredentialCreationOptions);\n  return await navigator.credentials.create({\n    publicKey: publicKeyCredentialCreationOptions\n  });\n};\n_c = CreatePassKeyCredential;\nexport default CreatePassKeyCredential;\nvar _c;\n$RefreshReg$(_c, \"CreatePassKeyCredential\");","map":{"version":3,"names":["CreatePassKeyCredential","username","challengeBufferString","userId","challengeBuffer","Uint8Array","from","c","charCodeAt","userIdBuffer","publicKeyCredentialCreationOptions","challenge","rp","name","process","env","REACT_APP_RP_NAME","id","REACT_APP_DOMAIN","user","displayName","pubKeyCredParams","type","alg","timeout","attestation","console","log","navigator","credentials","create","publicKey","_c","$RefreshReg$"],"sources":["/Users/peterchen/Dropbox/Hexlink/pwa-demo/src/utils/passkey/register/createPasskeyCredential.tsx"],"sourcesContent":["import React from \"react\";\n\nconst CreatePassKeyCredential = async (\n  username: string,\n  challengeBufferString: string,\n  userId: string\n) => {\n  /*\n    The challenge is a buffer of randomly generated bytes with a minimum of 16 bytes. \n    This is generated on the server using a cryptographically secure random number generator. \n    By generating the challenge on the server we can prevent \"replay attacks\". \n    The authenticator will sign this along with other data.\n  */\n  const challengeBuffer = Uint8Array.from(\n    challengeBufferString as string,\n    (c) => c.charCodeAt(0)\n  );\n\n  const userIdBuffer = Uint8Array.from(userId, (c) => c.charCodeAt(0));\n\n  const publicKeyCredentialCreationOptions: PublicKeyCredentialCreationOptions =\n    {\n      challenge: challengeBuffer,\n      rp: {\n        name: process.env.REACT_APP_RP_NAME as string,\n        id: process.env.REACT_APP_DOMAIN,\n      },\n      user: {\n        id: userIdBuffer,\n        name: username,\n        displayName: username,\n      },\n      // SUPPORT ALL PASSKEYS\n      pubKeyCredParams: [\n        {\n          type: \"public-key\",\n          alg: -7,\n        },\n        {\n          type: \"public-key\",\n          alg: -35,\n        },\n        {\n          type: \"public-key\",\n          alg: -36,\n        },\n        {\n          type: \"public-key\",\n          alg: -257,\n        },\n        {\n          type: \"public-key\",\n          alg: -258,\n        },\n        {\n          type: \"public-key\",\n          alg: -259,\n        },\n        {\n          type: \"public-key\",\n          alg: -37,\n        },\n        {\n          type: \"public-key\",\n          alg: -38,\n        },\n        {\n          type: \"public-key\",\n          alg: -39,\n        },\n        {\n          type: \"public-key\",\n          alg: -8,\n        },\n      ],\n      timeout: 15000,\n      attestation: \"direct\",\n    };\n\n  console.log(\n    \"✅  publicKeyCredentialCreationOptions : \",\n    publicKeyCredentialCreationOptions\n  );\n\n  return await navigator.credentials.create({\n    publicKey: publicKeyCredentialCreationOptions,\n  });\n};\n\nexport default CreatePassKeyCredential;\n"],"mappings":"AAEA,MAAMA,uBAAuB,GAAG,MAAAA,CAC9BC,QAAgB,EAChBC,qBAA6B,EAC7BC,MAAc,KACX;EACH;AACF;AACA;AACA;AACA;AACA;EACE,MAAMC,eAAe,GAAGC,UAAU,CAACC,IAAI,CACrCJ,qBAAqB,EACpBK,CAAC,IAAKA,CAAC,CAACC,UAAU,CAAC,CAAC,CACvB,CAAC;EAED,MAAMC,YAAY,GAAGJ,UAAU,CAACC,IAAI,CAACH,MAAM,EAAGI,CAAC,IAAKA,CAAC,CAACC,UAAU,CAAC,CAAC,CAAC,CAAC;EAEpE,MAAME,kCAAsE,GAC1E;IACEC,SAAS,EAAEP,eAAe;IAC1BQ,EAAE,EAAE;MACFC,IAAI,EAAEC,OAAO,CAACC,GAAG,CAACC,iBAA2B;MAC7CC,EAAE,EAAEH,OAAO,CAACC,GAAG,CAACG;IAClB,CAAC;IACDC,IAAI,EAAE;MACJF,EAAE,EAAER,YAAY;MAChBI,IAAI,EAAEZ,QAAQ;MACdmB,WAAW,EAAEnB;IACf,CAAC;IACD;IACAoB,gBAAgB,EAAE,CAChB;MACEC,IAAI,EAAE,YAAY;MAClBC,GAAG,EAAE,CAAC;IACR,CAAC,EACD;MACED,IAAI,EAAE,YAAY;MAClBC,GAAG,EAAE,CAAC;IACR,CAAC,EACD;MACED,IAAI,EAAE,YAAY;MAClBC,GAAG,EAAE,CAAC;IACR,CAAC,EACD;MACED,IAAI,EAAE,YAAY;MAClBC,GAAG,EAAE,CAAC;IACR,CAAC,EACD;MACED,IAAI,EAAE,YAAY;MAClBC,GAAG,EAAE,CAAC;IACR,CAAC,EACD;MACED,IAAI,EAAE,YAAY;MAClBC,GAAG,EAAE,CAAC;IACR,CAAC,EACD;MACED,IAAI,EAAE,YAAY;MAClBC,GAAG,EAAE,CAAC;IACR,CAAC,EACD;MACED,IAAI,EAAE,YAAY;MAClBC,GAAG,EAAE,CAAC;IACR,CAAC,EACD;MACED,IAAI,EAAE,YAAY;MAClBC,GAAG,EAAE,CAAC;IACR,CAAC,EACD;MACED,IAAI,EAAE,YAAY;MAClBC,GAAG,EAAE,CAAC;IACR,CAAC,CACF;IACDC,OAAO,EAAE,KAAK;IACdC,WAAW,EAAE;EACf,CAAC;EAEHC,OAAO,CAACC,GAAG,CACT,0CAA0C,EAC1CjB,kCACF,CAAC;EAED,OAAO,MAAMkB,SAAS,CAACC,WAAW,CAACC,MAAM,CAAC;IACxCC,SAAS,EAAErB;EACb,CAAC,CAAC;AACJ,CAAC;AAACsB,EAAA,GArFIhC,uBAAuB;AAuF7B,eAAeA,uBAAuB;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}