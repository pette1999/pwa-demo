{"ast":null,"code":"import * as converters from \"./converters\";\nimport { AsnTypeTypes } from \"./enums\";\nimport { schemaStorage } from \"./storage\";\nexport const AsnType = options => target => {\n  let schema;\n  if (!schemaStorage.has(target)) {\n    schema = schemaStorage.createDefault(target);\n    schemaStorage.set(target, schema);\n  } else {\n    schema = schemaStorage.get(target);\n  }\n  Object.assign(schema, options);\n};\nexport const AsnChoiceType = () => AsnType({\n  type: AsnTypeTypes.Choice\n});\nexport const AsnSetType = options => AsnType({\n  type: AsnTypeTypes.Set,\n  ...options\n});\nexport const AsnSequenceType = options => AsnType({\n  type: AsnTypeTypes.Sequence,\n  ...options\n});\nexport const AsnProp = options => (target, propertyKey) => {\n  let schema;\n  if (!schemaStorage.has(target.constructor)) {\n    schema = schemaStorage.createDefault(target.constructor);\n    schemaStorage.set(target.constructor, schema);\n  } else {\n    schema = schemaStorage.get(target.constructor);\n  }\n  const copyOptions = Object.assign({}, options);\n  if (typeof copyOptions.type === \"number\" && !copyOptions.converter) {\n    const defaultConverter = converters.defaultConverter(options.type);\n    if (!defaultConverter) {\n      throw new Error(`Cannot get default converter for property '${propertyKey}' of ${target.constructor.name}`);\n    }\n    copyOptions.converter = defaultConverter;\n  }\n  schema.items[propertyKey] = copyOptions;\n};","map":{"version":3,"names":["converters","AsnTypeTypes","schemaStorage","AsnType","options","target","schema","has","createDefault","set","get","Object","assign","AsnChoiceType","type","Choice","AsnSetType","Set","AsnSequenceType","Sequence","AsnProp","propertyKey","constructor","copyOptions","converter","defaultConverter","Error","name","items"],"sources":["/Users/peterchen/Dropbox/Hexlink/pwa-demo/node_modules/@peculiar/asn1-schema/build/es2015/decorators.js"],"sourcesContent":["import * as converters from \"./converters\";\nimport { AsnTypeTypes } from \"./enums\";\nimport { schemaStorage } from \"./storage\";\nexport const AsnType = (options) => (target) => {\n    let schema;\n    if (!schemaStorage.has(target)) {\n        schema = schemaStorage.createDefault(target);\n        schemaStorage.set(target, schema);\n    }\n    else {\n        schema = schemaStorage.get(target);\n    }\n    Object.assign(schema, options);\n};\nexport const AsnChoiceType = () => AsnType({ type: AsnTypeTypes.Choice });\nexport const AsnSetType = (options) => AsnType({ type: AsnTypeTypes.Set, ...options });\nexport const AsnSequenceType = (options) => AsnType({ type: AsnTypeTypes.Sequence, ...options });\nexport const AsnProp = (options) => (target, propertyKey) => {\n    let schema;\n    if (!schemaStorage.has(target.constructor)) {\n        schema = schemaStorage.createDefault(target.constructor);\n        schemaStorage.set(target.constructor, schema);\n    }\n    else {\n        schema = schemaStorage.get(target.constructor);\n    }\n    const copyOptions = Object.assign({}, options);\n    if (typeof copyOptions.type === \"number\" && !copyOptions.converter) {\n        const defaultConverter = converters.defaultConverter(options.type);\n        if (!defaultConverter) {\n            throw new Error(`Cannot get default converter for property '${propertyKey}' of ${target.constructor.name}`);\n        }\n        copyOptions.converter = defaultConverter;\n    }\n    schema.items[propertyKey] = copyOptions;\n};\n"],"mappings":"AAAA,OAAO,KAAKA,UAAU,MAAM,cAAc;AAC1C,SAASC,YAAY,QAAQ,SAAS;AACtC,SAASC,aAAa,QAAQ,WAAW;AACzC,OAAO,MAAMC,OAAO,GAAIC,OAAO,IAAMC,MAAM,IAAK;EAC5C,IAAIC,MAAM;EACV,IAAI,CAACJ,aAAa,CAACK,GAAG,CAACF,MAAM,CAAC,EAAE;IAC5BC,MAAM,GAAGJ,aAAa,CAACM,aAAa,CAACH,MAAM,CAAC;IAC5CH,aAAa,CAACO,GAAG,CAACJ,MAAM,EAAEC,MAAM,CAAC;EACrC,CAAC,MACI;IACDA,MAAM,GAAGJ,aAAa,CAACQ,GAAG,CAACL,MAAM,CAAC;EACtC;EACAM,MAAM,CAACC,MAAM,CAACN,MAAM,EAAEF,OAAO,CAAC;AAClC,CAAC;AACD,OAAO,MAAMS,aAAa,GAAGA,CAAA,KAAMV,OAAO,CAAC;EAAEW,IAAI,EAAEb,YAAY,CAACc;AAAO,CAAC,CAAC;AACzE,OAAO,MAAMC,UAAU,GAAIZ,OAAO,IAAKD,OAAO,CAAC;EAAEW,IAAI,EAAEb,YAAY,CAACgB,GAAG;EAAE,GAAGb;AAAQ,CAAC,CAAC;AACtF,OAAO,MAAMc,eAAe,GAAId,OAAO,IAAKD,OAAO,CAAC;EAAEW,IAAI,EAAEb,YAAY,CAACkB,QAAQ;EAAE,GAAGf;AAAQ,CAAC,CAAC;AAChG,OAAO,MAAMgB,OAAO,GAAIhB,OAAO,IAAK,CAACC,MAAM,EAAEgB,WAAW,KAAK;EACzD,IAAIf,MAAM;EACV,IAAI,CAACJ,aAAa,CAACK,GAAG,CAACF,MAAM,CAACiB,WAAW,CAAC,EAAE;IACxChB,MAAM,GAAGJ,aAAa,CAACM,aAAa,CAACH,MAAM,CAACiB,WAAW,CAAC;IACxDpB,aAAa,CAACO,GAAG,CAACJ,MAAM,CAACiB,WAAW,EAAEhB,MAAM,CAAC;EACjD,CAAC,MACI;IACDA,MAAM,GAAGJ,aAAa,CAACQ,GAAG,CAACL,MAAM,CAACiB,WAAW,CAAC;EAClD;EACA,MAAMC,WAAW,GAAGZ,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAER,OAAO,CAAC;EAC9C,IAAI,OAAOmB,WAAW,CAACT,IAAI,KAAK,QAAQ,IAAI,CAACS,WAAW,CAACC,SAAS,EAAE;IAChE,MAAMC,gBAAgB,GAAGzB,UAAU,CAACyB,gBAAgB,CAACrB,OAAO,CAACU,IAAI,CAAC;IAClE,IAAI,CAACW,gBAAgB,EAAE;MACnB,MAAM,IAAIC,KAAK,CAAE,8CAA6CL,WAAY,QAAOhB,MAAM,CAACiB,WAAW,CAACK,IAAK,EAAC,CAAC;IAC/G;IACAJ,WAAW,CAACC,SAAS,GAAGC,gBAAgB;EAC5C;EACAnB,MAAM,CAACsB,KAAK,CAACP,WAAW,CAAC,GAAGE,WAAW;AAC3C,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}