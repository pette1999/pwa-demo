{"ast":null,"code":"/*!\n Copyright (c) Peculiar Ventures, LLC\n*/\n\nfunction getUTCDate(date) {\n  return new Date(date.getTime() + date.getTimezoneOffset() * 60000);\n}\nfunction getParametersValue(parameters, name, defaultValue) {\n  var _a;\n  if (parameters instanceof Object === false) {\n    return defaultValue;\n  }\n  return (_a = parameters[name]) !== null && _a !== void 0 ? _a : defaultValue;\n}\nfunction bufferToHexCodes(inputBuffer, inputOffset = 0, inputLength = inputBuffer.byteLength - inputOffset, insertSpace = false) {\n  let result = \"\";\n  for (const item of new Uint8Array(inputBuffer, inputOffset, inputLength)) {\n    const str = item.toString(16).toUpperCase();\n    if (str.length === 1) {\n      result += \"0\";\n    }\n    result += str;\n    if (insertSpace) {\n      result += \" \";\n    }\n  }\n  return result.trim();\n}\nfunction checkBufferParams(baseBlock, inputBuffer, inputOffset, inputLength) {\n  if (!(inputBuffer instanceof ArrayBuffer)) {\n    baseBlock.error = \"Wrong parameter: inputBuffer must be \\\"ArrayBuffer\\\"\";\n    return false;\n  }\n  if (!inputBuffer.byteLength) {\n    baseBlock.error = \"Wrong parameter: inputBuffer has zero length\";\n    return false;\n  }\n  if (inputOffset < 0) {\n    baseBlock.error = \"Wrong parameter: inputOffset less than zero\";\n    return false;\n  }\n  if (inputLength < 0) {\n    baseBlock.error = \"Wrong parameter: inputLength less than zero\";\n    return false;\n  }\n  if (inputBuffer.byteLength - inputOffset - inputLength < 0) {\n    baseBlock.error = \"End of input reached before message was fully decoded (inconsistent offset and length values)\";\n    return false;\n  }\n  return true;\n}\nfunction utilFromBase(inputBuffer, inputBase) {\n  let result = 0;\n  if (inputBuffer.length === 1) {\n    return inputBuffer[0];\n  }\n  for (let i = inputBuffer.length - 1; i >= 0; i--) {\n    result += inputBuffer[inputBuffer.length - 1 - i] * Math.pow(2, inputBase * i);\n  }\n  return result;\n}\nfunction utilToBase(value, base, reserved = -1) {\n  const internalReserved = reserved;\n  let internalValue = value;\n  let result = 0;\n  let biggest = Math.pow(2, base);\n  for (let i = 1; i < 8; i++) {\n    if (value < biggest) {\n      let retBuf;\n      if (internalReserved < 0) {\n        retBuf = new ArrayBuffer(i);\n        result = i;\n      } else {\n        if (internalReserved < i) {\n          return new ArrayBuffer(0);\n        }\n        retBuf = new ArrayBuffer(internalReserved);\n        result = internalReserved;\n      }\n      const retView = new Uint8Array(retBuf);\n      for (let j = i - 1; j >= 0; j--) {\n        const basis = Math.pow(2, j * base);\n        retView[result - j - 1] = Math.floor(internalValue / basis);\n        internalValue -= retView[result - j - 1] * basis;\n      }\n      return retBuf;\n    }\n    biggest *= Math.pow(2, base);\n  }\n  return new ArrayBuffer(0);\n}\nfunction utilConcatBuf(...buffers) {\n  let outputLength = 0;\n  let prevLength = 0;\n  for (const buffer of buffers) {\n    outputLength += buffer.byteLength;\n  }\n  const retBuf = new ArrayBuffer(outputLength);\n  const retView = new Uint8Array(retBuf);\n  for (const buffer of buffers) {\n    retView.set(new Uint8Array(buffer), prevLength);\n    prevLength += buffer.byteLength;\n  }\n  return retBuf;\n}\nfunction utilConcatView(...views) {\n  let outputLength = 0;\n  let prevLength = 0;\n  for (const view of views) {\n    outputLength += view.length;\n  }\n  const retBuf = new ArrayBuffer(outputLength);\n  const retView = new Uint8Array(retBuf);\n  for (const view of views) {\n    retView.set(view, prevLength);\n    prevLength += view.length;\n  }\n  return retView;\n}\nfunction utilDecodeTC() {\n  const buf = new Uint8Array(this.valueHex);\n  if (this.valueHex.byteLength >= 2) {\n    const condition1 = buf[0] === 0xFF && buf[1] & 0x80;\n    const condition2 = buf[0] === 0x00 && (buf[1] & 0x80) === 0x00;\n    if (condition1 || condition2) {\n      this.warnings.push(\"Needlessly long format\");\n    }\n  }\n  const bigIntBuffer = new ArrayBuffer(this.valueHex.byteLength);\n  const bigIntView = new Uint8Array(bigIntBuffer);\n  for (let i = 0; i < this.valueHex.byteLength; i++) {\n    bigIntView[i] = 0;\n  }\n  bigIntView[0] = buf[0] & 0x80;\n  const bigInt = utilFromBase(bigIntView, 8);\n  const smallIntBuffer = new ArrayBuffer(this.valueHex.byteLength);\n  const smallIntView = new Uint8Array(smallIntBuffer);\n  for (let j = 0; j < this.valueHex.byteLength; j++) {\n    smallIntView[j] = buf[j];\n  }\n  smallIntView[0] &= 0x7F;\n  const smallInt = utilFromBase(smallIntView, 8);\n  return smallInt - bigInt;\n}\nfunction utilEncodeTC(value) {\n  const modValue = value < 0 ? value * -1 : value;\n  let bigInt = 128;\n  for (let i = 1; i < 8; i++) {\n    if (modValue <= bigInt) {\n      if (value < 0) {\n        const smallInt = bigInt - modValue;\n        const retBuf = utilToBase(smallInt, 8, i);\n        const retView = new Uint8Array(retBuf);\n        retView[0] |= 0x80;\n        return retBuf;\n      }\n      let retBuf = utilToBase(modValue, 8, i);\n      let retView = new Uint8Array(retBuf);\n      if (retView[0] & 0x80) {\n        const tempBuf = retBuf.slice(0);\n        const tempView = new Uint8Array(tempBuf);\n        retBuf = new ArrayBuffer(retBuf.byteLength + 1);\n        retView = new Uint8Array(retBuf);\n        for (let k = 0; k < tempBuf.byteLength; k++) {\n          retView[k + 1] = tempView[k];\n        }\n        retView[0] = 0x00;\n      }\n      return retBuf;\n    }\n    bigInt *= Math.pow(2, 8);\n  }\n  return new ArrayBuffer(0);\n}\nfunction isEqualBuffer(inputBuffer1, inputBuffer2) {\n  if (inputBuffer1.byteLength !== inputBuffer2.byteLength) {\n    return false;\n  }\n  const view1 = new Uint8Array(inputBuffer1);\n  const view2 = new Uint8Array(inputBuffer2);\n  for (let i = 0; i < view1.length; i++) {\n    if (view1[i] !== view2[i]) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction padNumber(inputNumber, fullLength) {\n  const str = inputNumber.toString(10);\n  if (fullLength < str.length) {\n    return \"\";\n  }\n  const dif = fullLength - str.length;\n  const padding = new Array(dif);\n  for (let i = 0; i < dif; i++) {\n    padding[i] = \"0\";\n  }\n  const paddingString = padding.join(\"\");\n  return paddingString.concat(str);\n}\nconst base64Template = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\nconst base64UrlTemplate = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=\";\nfunction toBase64(input, useUrlTemplate = false, skipPadding = false, skipLeadingZeros = false) {\n  let i = 0;\n  let flag1 = 0;\n  let flag2 = 0;\n  let output = \"\";\n  const template = useUrlTemplate ? base64UrlTemplate : base64Template;\n  if (skipLeadingZeros) {\n    let nonZeroPosition = 0;\n    for (let i = 0; i < input.length; i++) {\n      if (input.charCodeAt(i) !== 0) {\n        nonZeroPosition = i;\n        break;\n      }\n    }\n    input = input.slice(nonZeroPosition);\n  }\n  while (i < input.length) {\n    const chr1 = input.charCodeAt(i++);\n    if (i >= input.length) {\n      flag1 = 1;\n    }\n    const chr2 = input.charCodeAt(i++);\n    if (i >= input.length) {\n      flag2 = 1;\n    }\n    const chr3 = input.charCodeAt(i++);\n    const enc1 = chr1 >> 2;\n    const enc2 = (chr1 & 0x03) << 4 | chr2 >> 4;\n    let enc3 = (chr2 & 0x0F) << 2 | chr3 >> 6;\n    let enc4 = chr3 & 0x3F;\n    if (flag1 === 1) {\n      enc3 = enc4 = 64;\n    } else {\n      if (flag2 === 1) {\n        enc4 = 64;\n      }\n    }\n    if (skipPadding) {\n      if (enc3 === 64) {\n        output += `${template.charAt(enc1)}${template.charAt(enc2)}`;\n      } else {\n        if (enc4 === 64) {\n          output += `${template.charAt(enc1)}${template.charAt(enc2)}${template.charAt(enc3)}`;\n        } else {\n          output += `${template.charAt(enc1)}${template.charAt(enc2)}${template.charAt(enc3)}${template.charAt(enc4)}`;\n        }\n      }\n    } else {\n      output += `${template.charAt(enc1)}${template.charAt(enc2)}${template.charAt(enc3)}${template.charAt(enc4)}`;\n    }\n  }\n  return output;\n}\nfunction fromBase64(input, useUrlTemplate = false, cutTailZeros = false) {\n  const template = useUrlTemplate ? base64UrlTemplate : base64Template;\n  function indexOf(toSearch) {\n    for (let i = 0; i < 64; i++) {\n      if (template.charAt(i) === toSearch) return i;\n    }\n    return 64;\n  }\n  function test(incoming) {\n    return incoming === 64 ? 0x00 : incoming;\n  }\n  let i = 0;\n  let output = \"\";\n  while (i < input.length) {\n    const enc1 = indexOf(input.charAt(i++));\n    const enc2 = i >= input.length ? 0x00 : indexOf(input.charAt(i++));\n    const enc3 = i >= input.length ? 0x00 : indexOf(input.charAt(i++));\n    const enc4 = i >= input.length ? 0x00 : indexOf(input.charAt(i++));\n    const chr1 = test(enc1) << 2 | test(enc2) >> 4;\n    const chr2 = (test(enc2) & 0x0F) << 4 | test(enc3) >> 2;\n    const chr3 = (test(enc3) & 0x03) << 6 | test(enc4);\n    output += String.fromCharCode(chr1);\n    if (enc3 !== 64) {\n      output += String.fromCharCode(chr2);\n    }\n    if (enc4 !== 64) {\n      output += String.fromCharCode(chr3);\n    }\n  }\n  if (cutTailZeros) {\n    const outputLength = output.length;\n    let nonZeroStart = -1;\n    for (let i = outputLength - 1; i >= 0; i--) {\n      if (output.charCodeAt(i) !== 0) {\n        nonZeroStart = i;\n        break;\n      }\n    }\n    if (nonZeroStart !== -1) {\n      output = output.slice(0, nonZeroStart + 1);\n    } else {\n      output = \"\";\n    }\n  }\n  return output;\n}\nfunction arrayBufferToString(buffer) {\n  let resultString = \"\";\n  const view = new Uint8Array(buffer);\n  for (const element of view) {\n    resultString += String.fromCharCode(element);\n  }\n  return resultString;\n}\nfunction stringToArrayBuffer(str) {\n  const stringLength = str.length;\n  const resultBuffer = new ArrayBuffer(stringLength);\n  const resultView = new Uint8Array(resultBuffer);\n  for (let i = 0; i < stringLength; i++) {\n    resultView[i] = str.charCodeAt(i);\n  }\n  return resultBuffer;\n}\nconst log2 = Math.log(2);\nfunction nearestPowerOf2(length) {\n  const base = Math.log(length) / log2;\n  const floor = Math.floor(base);\n  const round = Math.round(base);\n  return floor === round ? floor : round;\n}\nfunction clearProps(object, propsArray) {\n  for (const prop of propsArray) {\n    delete object[prop];\n  }\n}\nexport { arrayBufferToString, bufferToHexCodes, checkBufferParams, clearProps, fromBase64, getParametersValue, getUTCDate, isEqualBuffer, nearestPowerOf2, padNumber, stringToArrayBuffer, toBase64, utilConcatBuf, utilConcatView, utilDecodeTC, utilEncodeTC, utilFromBase, utilToBase };","map":{"version":3,"names":["getUTCDate","date","Date","getTime","getTimezoneOffset","getParametersValue","parameters","name","defaultValue","_a","Object","bufferToHexCodes","inputBuffer","inputOffset","inputLength","byteLength","insertSpace","result","item","Uint8Array","str","toString","toUpperCase","length","trim","checkBufferParams","baseBlock","ArrayBuffer","error","utilFromBase","inputBase","i","Math","pow","utilToBase","value","base","reserved","internalReserved","internalValue","biggest","retBuf","retView","j","basis","floor","utilConcatBuf","buffers","outputLength","prevLength","buffer","set","utilConcatView","views","view","utilDecodeTC","buf","valueHex","condition1","condition2","warnings","push","bigIntBuffer","bigIntView","bigInt","smallIntBuffer","smallIntView","smallInt","utilEncodeTC","modValue","tempBuf","slice","tempView","k","isEqualBuffer","inputBuffer1","inputBuffer2","view1","view2","padNumber","inputNumber","fullLength","dif","padding","Array","paddingString","join","concat","base64Template","base64UrlTemplate","toBase64","input","useUrlTemplate","skipPadding","skipLeadingZeros","flag1","flag2","output","template","nonZeroPosition","charCodeAt","chr1","chr2","chr3","enc1","enc2","enc3","enc4","charAt","fromBase64","cutTailZeros","indexOf","toSearch","test","incoming","String","fromCharCode","nonZeroStart","arrayBufferToString","resultString","element","stringToArrayBuffer","stringLength","resultBuffer","resultView","log2","log","nearestPowerOf2","round","clearProps","object","propsArray","prop"],"sources":["/Users/peterchen/Dropbox/Hexlink/Projects/pwa-demo/node_modules/pvutils/build/utils.es.js"],"sourcesContent":["/*!\n Copyright (c) Peculiar Ventures, LLC\n*/\n\nfunction getUTCDate(date) {\r\n    return new Date(date.getTime() + (date.getTimezoneOffset() * 60000));\r\n}\r\nfunction getParametersValue(parameters, name, defaultValue) {\r\n    var _a;\r\n    if ((parameters instanceof Object) === false) {\r\n        return defaultValue;\r\n    }\r\n    return (_a = parameters[name]) !== null && _a !== void 0 ? _a : defaultValue;\r\n}\r\nfunction bufferToHexCodes(inputBuffer, inputOffset = 0, inputLength = (inputBuffer.byteLength - inputOffset), insertSpace = false) {\r\n    let result = \"\";\r\n    for (const item of (new Uint8Array(inputBuffer, inputOffset, inputLength))) {\r\n        const str = item.toString(16).toUpperCase();\r\n        if (str.length === 1) {\r\n            result += \"0\";\r\n        }\r\n        result += str;\r\n        if (insertSpace) {\r\n            result += \" \";\r\n        }\r\n    }\r\n    return result.trim();\r\n}\r\nfunction checkBufferParams(baseBlock, inputBuffer, inputOffset, inputLength) {\r\n    if (!(inputBuffer instanceof ArrayBuffer)) {\r\n        baseBlock.error = \"Wrong parameter: inputBuffer must be \\\"ArrayBuffer\\\"\";\r\n        return false;\r\n    }\r\n    if (!inputBuffer.byteLength) {\r\n        baseBlock.error = \"Wrong parameter: inputBuffer has zero length\";\r\n        return false;\r\n    }\r\n    if (inputOffset < 0) {\r\n        baseBlock.error = \"Wrong parameter: inputOffset less than zero\";\r\n        return false;\r\n    }\r\n    if (inputLength < 0) {\r\n        baseBlock.error = \"Wrong parameter: inputLength less than zero\";\r\n        return false;\r\n    }\r\n    if ((inputBuffer.byteLength - inputOffset - inputLength) < 0) {\r\n        baseBlock.error = \"End of input reached before message was fully decoded (inconsistent offset and length values)\";\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\nfunction utilFromBase(inputBuffer, inputBase) {\r\n    let result = 0;\r\n    if (inputBuffer.length === 1) {\r\n        return inputBuffer[0];\r\n    }\r\n    for (let i = (inputBuffer.length - 1); i >= 0; i--) {\r\n        result += inputBuffer[(inputBuffer.length - 1) - i] * Math.pow(2, inputBase * i);\r\n    }\r\n    return result;\r\n}\r\nfunction utilToBase(value, base, reserved = (-1)) {\r\n    const internalReserved = reserved;\r\n    let internalValue = value;\r\n    let result = 0;\r\n    let biggest = Math.pow(2, base);\r\n    for (let i = 1; i < 8; i++) {\r\n        if (value < biggest) {\r\n            let retBuf;\r\n            if (internalReserved < 0) {\r\n                retBuf = new ArrayBuffer(i);\r\n                result = i;\r\n            }\r\n            else {\r\n                if (internalReserved < i) {\r\n                    return (new ArrayBuffer(0));\r\n                }\r\n                retBuf = new ArrayBuffer(internalReserved);\r\n                result = internalReserved;\r\n            }\r\n            const retView = new Uint8Array(retBuf);\r\n            for (let j = (i - 1); j >= 0; j--) {\r\n                const basis = Math.pow(2, j * base);\r\n                retView[result - j - 1] = Math.floor(internalValue / basis);\r\n                internalValue -= (retView[result - j - 1]) * basis;\r\n            }\r\n            return retBuf;\r\n        }\r\n        biggest *= Math.pow(2, base);\r\n    }\r\n    return new ArrayBuffer(0);\r\n}\r\nfunction utilConcatBuf(...buffers) {\r\n    let outputLength = 0;\r\n    let prevLength = 0;\r\n    for (const buffer of buffers) {\r\n        outputLength += buffer.byteLength;\r\n    }\r\n    const retBuf = new ArrayBuffer(outputLength);\r\n    const retView = new Uint8Array(retBuf);\r\n    for (const buffer of buffers) {\r\n        retView.set(new Uint8Array(buffer), prevLength);\r\n        prevLength += buffer.byteLength;\r\n    }\r\n    return retBuf;\r\n}\r\nfunction utilConcatView(...views) {\r\n    let outputLength = 0;\r\n    let prevLength = 0;\r\n    for (const view of views) {\r\n        outputLength += view.length;\r\n    }\r\n    const retBuf = new ArrayBuffer(outputLength);\r\n    const retView = new Uint8Array(retBuf);\r\n    for (const view of views) {\r\n        retView.set(view, prevLength);\r\n        prevLength += view.length;\r\n    }\r\n    return retView;\r\n}\r\nfunction utilDecodeTC() {\r\n    const buf = new Uint8Array(this.valueHex);\r\n    if (this.valueHex.byteLength >= 2) {\r\n        const condition1 = (buf[0] === 0xFF) && (buf[1] & 0x80);\r\n        const condition2 = (buf[0] === 0x00) && ((buf[1] & 0x80) === 0x00);\r\n        if (condition1 || condition2) {\r\n            this.warnings.push(\"Needlessly long format\");\r\n        }\r\n    }\r\n    const bigIntBuffer = new ArrayBuffer(this.valueHex.byteLength);\r\n    const bigIntView = new Uint8Array(bigIntBuffer);\r\n    for (let i = 0; i < this.valueHex.byteLength; i++) {\r\n        bigIntView[i] = 0;\r\n    }\r\n    bigIntView[0] = (buf[0] & 0x80);\r\n    const bigInt = utilFromBase(bigIntView, 8);\r\n    const smallIntBuffer = new ArrayBuffer(this.valueHex.byteLength);\r\n    const smallIntView = new Uint8Array(smallIntBuffer);\r\n    for (let j = 0; j < this.valueHex.byteLength; j++) {\r\n        smallIntView[j] = buf[j];\r\n    }\r\n    smallIntView[0] &= 0x7F;\r\n    const smallInt = utilFromBase(smallIntView, 8);\r\n    return (smallInt - bigInt);\r\n}\r\nfunction utilEncodeTC(value) {\r\n    const modValue = (value < 0) ? (value * (-1)) : value;\r\n    let bigInt = 128;\r\n    for (let i = 1; i < 8; i++) {\r\n        if (modValue <= bigInt) {\r\n            if (value < 0) {\r\n                const smallInt = bigInt - modValue;\r\n                const retBuf = utilToBase(smallInt, 8, i);\r\n                const retView = new Uint8Array(retBuf);\r\n                retView[0] |= 0x80;\r\n                return retBuf;\r\n            }\r\n            let retBuf = utilToBase(modValue, 8, i);\r\n            let retView = new Uint8Array(retBuf);\r\n            if (retView[0] & 0x80) {\r\n                const tempBuf = retBuf.slice(0);\r\n                const tempView = new Uint8Array(tempBuf);\r\n                retBuf = new ArrayBuffer(retBuf.byteLength + 1);\r\n                retView = new Uint8Array(retBuf);\r\n                for (let k = 0; k < tempBuf.byteLength; k++) {\r\n                    retView[k + 1] = tempView[k];\r\n                }\r\n                retView[0] = 0x00;\r\n            }\r\n            return retBuf;\r\n        }\r\n        bigInt *= Math.pow(2, 8);\r\n    }\r\n    return (new ArrayBuffer(0));\r\n}\r\nfunction isEqualBuffer(inputBuffer1, inputBuffer2) {\r\n    if (inputBuffer1.byteLength !== inputBuffer2.byteLength) {\r\n        return false;\r\n    }\r\n    const view1 = new Uint8Array(inputBuffer1);\r\n    const view2 = new Uint8Array(inputBuffer2);\r\n    for (let i = 0; i < view1.length; i++) {\r\n        if (view1[i] !== view2[i]) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\nfunction padNumber(inputNumber, fullLength) {\r\n    const str = inputNumber.toString(10);\r\n    if (fullLength < str.length) {\r\n        return \"\";\r\n    }\r\n    const dif = fullLength - str.length;\r\n    const padding = new Array(dif);\r\n    for (let i = 0; i < dif; i++) {\r\n        padding[i] = \"0\";\r\n    }\r\n    const paddingString = padding.join(\"\");\r\n    return paddingString.concat(str);\r\n}\r\nconst base64Template = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\r\nconst base64UrlTemplate = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=\";\r\nfunction toBase64(input, useUrlTemplate = false, skipPadding = false, skipLeadingZeros = false) {\r\n    let i = 0;\r\n    let flag1 = 0;\r\n    let flag2 = 0;\r\n    let output = \"\";\r\n    const template = (useUrlTemplate) ? base64UrlTemplate : base64Template;\r\n    if (skipLeadingZeros) {\r\n        let nonZeroPosition = 0;\r\n        for (let i = 0; i < input.length; i++) {\r\n            if (input.charCodeAt(i) !== 0) {\r\n                nonZeroPosition = i;\r\n                break;\r\n            }\r\n        }\r\n        input = input.slice(nonZeroPosition);\r\n    }\r\n    while (i < input.length) {\r\n        const chr1 = input.charCodeAt(i++);\r\n        if (i >= input.length) {\r\n            flag1 = 1;\r\n        }\r\n        const chr2 = input.charCodeAt(i++);\r\n        if (i >= input.length) {\r\n            flag2 = 1;\r\n        }\r\n        const chr3 = input.charCodeAt(i++);\r\n        const enc1 = chr1 >> 2;\r\n        const enc2 = ((chr1 & 0x03) << 4) | (chr2 >> 4);\r\n        let enc3 = ((chr2 & 0x0F) << 2) | (chr3 >> 6);\r\n        let enc4 = chr3 & 0x3F;\r\n        if (flag1 === 1) {\r\n            enc3 = enc4 = 64;\r\n        }\r\n        else {\r\n            if (flag2 === 1) {\r\n                enc4 = 64;\r\n            }\r\n        }\r\n        if (skipPadding) {\r\n            if (enc3 === 64) {\r\n                output += `${template.charAt(enc1)}${template.charAt(enc2)}`;\r\n            }\r\n            else {\r\n                if (enc4 === 64) {\r\n                    output += `${template.charAt(enc1)}${template.charAt(enc2)}${template.charAt(enc3)}`;\r\n                }\r\n                else {\r\n                    output += `${template.charAt(enc1)}${template.charAt(enc2)}${template.charAt(enc3)}${template.charAt(enc4)}`;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            output += `${template.charAt(enc1)}${template.charAt(enc2)}${template.charAt(enc3)}${template.charAt(enc4)}`;\r\n        }\r\n    }\r\n    return output;\r\n}\r\nfunction fromBase64(input, useUrlTemplate = false, cutTailZeros = false) {\r\n    const template = (useUrlTemplate) ? base64UrlTemplate : base64Template;\r\n    function indexOf(toSearch) {\r\n        for (let i = 0; i < 64; i++) {\r\n            if (template.charAt(i) === toSearch)\r\n                return i;\r\n        }\r\n        return 64;\r\n    }\r\n    function test(incoming) {\r\n        return ((incoming === 64) ? 0x00 : incoming);\r\n    }\r\n    let i = 0;\r\n    let output = \"\";\r\n    while (i < input.length) {\r\n        const enc1 = indexOf(input.charAt(i++));\r\n        const enc2 = (i >= input.length) ? 0x00 : indexOf(input.charAt(i++));\r\n        const enc3 = (i >= input.length) ? 0x00 : indexOf(input.charAt(i++));\r\n        const enc4 = (i >= input.length) ? 0x00 : indexOf(input.charAt(i++));\r\n        const chr1 = (test(enc1) << 2) | (test(enc2) >> 4);\r\n        const chr2 = ((test(enc2) & 0x0F) << 4) | (test(enc3) >> 2);\r\n        const chr3 = ((test(enc3) & 0x03) << 6) | test(enc4);\r\n        output += String.fromCharCode(chr1);\r\n        if (enc3 !== 64) {\r\n            output += String.fromCharCode(chr2);\r\n        }\r\n        if (enc4 !== 64) {\r\n            output += String.fromCharCode(chr3);\r\n        }\r\n    }\r\n    if (cutTailZeros) {\r\n        const outputLength = output.length;\r\n        let nonZeroStart = (-1);\r\n        for (let i = (outputLength - 1); i >= 0; i--) {\r\n            if (output.charCodeAt(i) !== 0) {\r\n                nonZeroStart = i;\r\n                break;\r\n            }\r\n        }\r\n        if (nonZeroStart !== (-1)) {\r\n            output = output.slice(0, nonZeroStart + 1);\r\n        }\r\n        else {\r\n            output = \"\";\r\n        }\r\n    }\r\n    return output;\r\n}\r\nfunction arrayBufferToString(buffer) {\r\n    let resultString = \"\";\r\n    const view = new Uint8Array(buffer);\r\n    for (const element of view) {\r\n        resultString += String.fromCharCode(element);\r\n    }\r\n    return resultString;\r\n}\r\nfunction stringToArrayBuffer(str) {\r\n    const stringLength = str.length;\r\n    const resultBuffer = new ArrayBuffer(stringLength);\r\n    const resultView = new Uint8Array(resultBuffer);\r\n    for (let i = 0; i < stringLength; i++) {\r\n        resultView[i] = str.charCodeAt(i);\r\n    }\r\n    return resultBuffer;\r\n}\r\nconst log2 = Math.log(2);\r\nfunction nearestPowerOf2(length) {\r\n    const base = (Math.log(length) / log2);\r\n    const floor = Math.floor(base);\r\n    const round = Math.round(base);\r\n    return ((floor === round) ? floor : round);\r\n}\r\nfunction clearProps(object, propsArray) {\r\n    for (const prop of propsArray) {\r\n        delete object[prop];\r\n    }\r\n}\n\nexport { arrayBufferToString, bufferToHexCodes, checkBufferParams, clearProps, fromBase64, getParametersValue, getUTCDate, isEqualBuffer, nearestPowerOf2, padNumber, stringToArrayBuffer, toBase64, utilConcatBuf, utilConcatView, utilDecodeTC, utilEncodeTC, utilFromBase, utilToBase };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}