{"ast":null,"code":"var _jsxFileName = \"/Users/peterchen/Dropbox/Hexlink/pwa-demo/src/layouts/register.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport CreatePassKeyCredential from \"utils/passkey/register/createPasskeyCredential\";\nimport validatePassKeyCreation from \"utils/passkey/register/validatePassKeyCreation\";\nimport { Container, SignInButton, Copy, UserName } from \"components/shared\";\nimport { useDispatch } from \"react-redux\";\nimport { addUserAccount } from \"redux-functionality/slices/userAccountsSlice\";\nimport generateRandomString from \"utils/generators/randomString\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\n// markup\nconst Register = _ref => {\n  _s();\n\n  let {\n    onRegister,\n    onReturnToSignIn\n  } = _ref;\n  const dispatch = useDispatch();\n  const [username, setUsername] = useState(\"\");\n  const [displayName, setDisplayName] = useState(\"\");\n\n  const onUserNameChanged = ev => {\n    setUsername(ev.target.value);\n  };\n\n  const onDisplayNameChanged = ev => {\n    setDisplayName(ev.target.value);\n  };\n\n  const createPassKey = async () => {\n    // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n    // MARK: THIS SHOULD BE DONE ON THE BACKEND\n    // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n    const userId = generateRandomString(16);\n    console.log(\"✅  Created userId : \", userId);\n    const challengeBufferString = generateRandomString(16);\n    console.log(\"✅ Created challengeBufferString : \", challengeBufferString); // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n    /* MARK: THIS SHOULD BE DONE IF AN ACCOUNT IS VALID \n             AND THE CHALLENGE BUFFER AND USERID SHOULD BE PASSED\n             FROM THE RETURN CALL IN THE SERVER\n    */\n    // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n    try {\n      const credential = await CreatePassKeyCredential(username.toLowerCase(), displayName.toLowerCase(), challengeBufferString, userId);\n      console.log(\"✅ Created Pass Key Credential ! \");\n\n      if (credential) {\n        // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n        // MARK: THIS SHOULD BE DONE ON THE BACKEND\n        // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n        console.log(\"✅ Credential is not null : \", credential); // Validate PassKey Creation\n\n        const challenge = validatePassKeyCreation(credential);\n\n        switch (challenge) {\n          case null:\n            console.log(\"❌ PassKey verification failed.\");\n            return;\n\n          default:\n            console.log(\"✅ PassKey verification passed with challenge : \", challenge); // Save the user account data.\n            // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n            // MARK: THIS SHOULD BE SAVED TO YOUR BACKEND DATABASE\n            // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n            dispatch(addUserAccount({\n              userId: userId,\n              username: username,\n              displayName: displayName,\n              challengeBuffer: challengeBufferString,\n              challenge: challenge\n            }));\n            onRegister();\n            break;\n        }\n      } else {\n        console.log(\"❌ Credential does not exist.\");\n      }\n    } catch (error) {\n      console.log(\"❌ Error creating credential\"); // Session Timed Out\n\n      console.log(\"ERROR : \", error);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(UserName, {\n      placeholder: \"Please enter your email\",\n      type: \"text\",\n      autoComplete: \"username webauthn\",\n      value: username,\n      onChange: onUserNameChanged\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(UserName, {\n      placeholder: \"What should we call you?\",\n      type: \"text\",\n      value: displayName,\n      onChange: onDisplayNameChanged\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SignInButton, {\n      onClick: createPassKey,\n      children: \" Register\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Copy, {\n      children: \"Already have an account ?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SignInButton, {\n      onClick: onReturnToSignIn,\n      children: \"Sign In\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Register, \"DPwgDkHRqUS89X/IsfRQs7BcSgg=\", false, function () {\n  return [useDispatch];\n});\n\n_c = Register;\nexport default Register;\n\nvar _c;\n\n$RefreshReg$(_c, \"Register\");","map":{"version":3,"names":["React","useState","CreatePassKeyCredential","validatePassKeyCreation","Container","SignInButton","Copy","UserName","useDispatch","addUserAccount","generateRandomString","Register","onRegister","onReturnToSignIn","dispatch","username","setUsername","displayName","setDisplayName","onUserNameChanged","ev","target","value","onDisplayNameChanged","createPassKey","userId","console","log","challengeBufferString","credential","toLowerCase","challenge","challengeBuffer","error"],"sources":["/Users/peterchen/Dropbox/Hexlink/pwa-demo/src/layouts/register.tsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport CreatePassKeyCredential from \"utils/passkey/register/createPasskeyCredential\";\nimport validatePassKeyCreation from \"utils/passkey/register/validatePassKeyCreation\";\nimport { Container, SignInButton, Copy, UserName } from \"components/shared\";\n\nimport { useDispatch } from \"react-redux\";\nimport { addUserAccount } from \"redux-functionality/slices/userAccountsSlice\";\n\nimport generateRandomString from \"utils/generators/randomString\";\n\ninterface Props {\n  onRegister: () => void;\n  onReturnToSignIn: () => void;\n}\n\n// markup\nconst Register = ({ onRegister, onReturnToSignIn }: Props) => {\n  const dispatch = useDispatch();\n\n  const [username, setUsername] = useState<string>(\"\");\n  const [displayName, setDisplayName] = useState<string>(\"\");\n\n  const onUserNameChanged = (ev: React.ChangeEvent<HTMLInputElement>) => {\n    setUsername(ev.target.value);\n  };\n\n  const onDisplayNameChanged = (ev: React.ChangeEvent<HTMLInputElement>) => {\n    setDisplayName(ev.target.value);\n  };\n\n  const createPassKey = async () => {\n    // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n    // MARK: THIS SHOULD BE DONE ON THE BACKEND\n    // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n    const userId = generateRandomString(16);\n    console.log(\"✅  Created userId : \", userId);\n    const challengeBufferString = generateRandomString(16);\n    console.log(\"✅ Created challengeBufferString : \", challengeBufferString);\n    // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n    /* MARK: THIS SHOULD BE DONE IF AN ACCOUNT IS VALID \n             AND THE CHALLENGE BUFFER AND USERID SHOULD BE PASSED\n             FROM THE RETURN CALL IN THE SERVER\n    */\n    // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n    try {\n      const credential = await CreatePassKeyCredential(\n        username.toLowerCase(),\n        displayName.toLowerCase(),\n        challengeBufferString,\n        userId\n      );\n\n      console.log(\"✅ Created Pass Key Credential ! \");\n\n      if (credential) {\n        // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n        // MARK: THIS SHOULD BE DONE ON THE BACKEND\n        // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n        console.log(\"✅ Credential is not null : \", credential);\n        // Validate PassKey Creation\n        const challenge = validatePassKeyCreation(credential);\n        switch (challenge) {\n          case null:\n            console.log(\"❌ PassKey verification failed.\");\n            return;\n          default:\n            console.log(\n              \"✅ PassKey verification passed with challenge : \",\n              challenge\n            );\n            // Save the user account data.\n            // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n            // MARK: THIS SHOULD BE SAVED TO YOUR BACKEND DATABASE\n            // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n            dispatch(\n              addUserAccount({\n                userId: userId,\n                username: username,\n                displayName: displayName,\n                challengeBuffer: challengeBufferString,\n                challenge: challenge,\n              })\n            );\n            onRegister();\n            break;\n        }\n      } else {\n        console.log(\"❌ Credential does not exist.\");\n      }\n    } catch (error) {\n      console.log(\"❌ Error creating credential\");\n      // Session Timed Out\n      console.log(\"ERROR : \", error);\n    }\n  };\n\n  return (\n    <Container>\n      <UserName\n        placeholder={\"Please enter your email\"}\n        type={\"text\"}\n        autoComplete={\"username webauthn\"}\n        value={username}\n        onChange={onUserNameChanged}\n      />\n      <UserName\n        placeholder={\"What should we call you?\"}\n        type={\"text\"}\n        value={displayName}\n        onChange={onDisplayNameChanged}\n      />\n      <SignInButton onClick={createPassKey}> Register</SignInButton>\n      <Copy>Already have an account ?</Copy>\n      <SignInButton onClick={onReturnToSignIn}>Sign In</SignInButton>\n    </Container>\n  );\n};\n\nexport default Register;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}