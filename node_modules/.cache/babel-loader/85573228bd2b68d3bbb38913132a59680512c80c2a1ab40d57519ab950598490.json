{"ast":null,"code":"import { ethers } from 'ethers';\nimport * as base64url from \"./base64url-arraybuffer\";\n// import base64url from \"base64url-ts2\";\nimport { ECDSASigValue } from '@peculiar/asn1-ecc';\nimport { AsnParser } from '@peculiar/asn1-schema';\nimport { Buffer } from 'buffer';\nfunction shouldRemoveLeadingZero(bytes) {\n  return bytes[0] === 0x0 && (bytes[1] & 1 << 7) !== 0;\n}\n\n/**\n * Parse the WebAuthn data payload and to create the inputs to verify the secp256r1/p256 signatures\n * in the EllipticCurve.sol contract, see https://github.com/tdrerup/elliptic-curve-solidity\n */\nexport const authResponseToSigVerificationInput = (parsedCredentialPublicKey, authResponse) => {\n  const authDataBuffer = base64url.toBuffer(authResponse.authenticatorData);\n  const clientDataHash = Buffer.from(ethers.sha256(base64url.toBuffer(authResponse.clientDataJSON)).slice(2), 'hex');\n  const signatureBase = Buffer.concat([authDataBuffer, clientDataHash]);\n  const signatureA = base64url.toBuffer(authResponse.signature);\n  console.log(signatureA);\n\n  // See https://github.dev/MasterKale/SimpleWebAuthn/blob/master/packages/server/src/helpers/iso/isoCrypto/verifyEC2.ts\n  // for extraction of the r and s bytes from the raw signature buffer\n  const parsedSignature = AsnParser.parse(signatureA, ECDSASigValue);\n  let rBytes = new Uint8Array(parsedSignature.r);\n  let sBytes = new Uint8Array(parsedSignature.s);\n  if (shouldRemoveLeadingZero(rBytes)) {\n    rBytes = rBytes.slice(1);\n  }\n  if (shouldRemoveLeadingZero(sBytes)) {\n    sBytes = sBytes.slice(1);\n  }\n\n  // Message data in sha256 hash\n  const messageHash = ethers.sha256(signatureBase);\n  // r and s values\n  const signature = ['0x' + Buffer.from(rBytes).toString('hex'), '0x' + Buffer.from(sBytes).toString('hex')];\n  // x and y coordinates\n  const publicKeyCoordinates = ['0x' + base64url.toBuffer((parsedCredentialPublicKey === null || parsedCredentialPublicKey === void 0 ? void 0 : parsedCredentialPublicKey.x) || '').toString('hex'), '0x' + base64url.toBuffer((parsedCredentialPublicKey === null || parsedCredentialPublicKey === void 0 ? void 0 : parsedCredentialPublicKey.y) || '').toString('hex')];\n\n  // Pass the following data to the EllipticCurve.validateSignature smart contract function\n  return {\n    messageHash,\n    signature,\n    publicKeyCoordinates\n  };\n};","map":{"version":3,"names":["ethers","base64url","ECDSASigValue","AsnParser","Buffer","shouldRemoveLeadingZero","bytes","authResponseToSigVerificationInput","parsedCredentialPublicKey","authResponse","authDataBuffer","toBuffer","authenticatorData","clientDataHash","from","sha256","clientDataJSON","slice","signatureBase","concat","signatureA","signature","console","log","parsedSignature","parse","rBytes","Uint8Array","r","sBytes","s","messageHash","toString","publicKeyCoordinates","x","y"],"sources":["/Users/peterchen/Dropbox/Hexlink/pwa-demo/src/utils/passkey/shared/authResponseToSigVerificationInput.ts"],"sourcesContent":["import { ethers } from 'ethers';\nimport * as base64url from \"./base64url-arraybuffer\";\n// import base64url from \"base64url-ts2\";\nimport { ECDSASigValue } from '@peculiar/asn1-ecc';\nimport { AsnParser } from '@peculiar/asn1-schema';\nimport { AuthenticatorAssertionResponseJSON } from '@simplewebauthn/typescript-types';\nimport { Buffer } from 'buffer';\n\nfunction shouldRemoveLeadingZero(bytes: Uint8Array): boolean {\n  return bytes[0] === 0x0 && (bytes[1] & (1 << 7)) !== 0;\n}\n\n/**\n * Parse the WebAuthn data payload and to create the inputs to verify the secp256r1/p256 signatures\n * in the EllipticCurve.sol contract, see https://github.com/tdrerup/elliptic-curve-solidity\n */\nexport const authResponseToSigVerificationInput = (\n  // Assumes the public key is on the secp256r1/p256 curve\n  parsedCredentialPublicKey: { x?: string; y?: string } | undefined,\n  authResponse: AuthenticatorAssertionResponseJSON,\n) => {\n  const authDataBuffer = base64url.toBuffer(authResponse.authenticatorData);\n  const clientDataHash = Buffer.from(\n    ethers.sha256(base64url.toBuffer(authResponse.clientDataJSON)).slice(2),\n    'hex',\n  );\n\n  const signatureBase = Buffer.concat([authDataBuffer, clientDataHash]);\n  const signatureA = base64url.toBuffer(authResponse.signature);\n  console.log(signatureA);\n\n  // See https://github.dev/MasterKale/SimpleWebAuthn/blob/master/packages/server/src/helpers/iso/isoCrypto/verifyEC2.ts\n  // for extraction of the r and s bytes from the raw signature buffer\n  const parsedSignature = AsnParser.parse(signatureA, ECDSASigValue);\n  let rBytes = new Uint8Array(parsedSignature.r);\n  let sBytes = new Uint8Array(parsedSignature.s);\n\n  if (shouldRemoveLeadingZero(rBytes)) {\n    rBytes = rBytes.slice(1);\n  }\n\n  if (shouldRemoveLeadingZero(sBytes)) {\n    sBytes = sBytes.slice(1);\n  }\n\n  // Message data in sha256 hash\n  const messageHash = ethers.sha256(signatureBase);\n  // r and s values\n  const signature = ['0x' + Buffer.from(rBytes).toString('hex'), '0x' + Buffer.from(sBytes).toString('hex')];\n  // x and y coordinates\n  const publicKeyCoordinates = [\n    '0x' + base64url.toBuffer(parsedCredentialPublicKey?.x || '').toString('hex'),\n    '0x' + base64url.toBuffer(parsedCredentialPublicKey?.y || '').toString('hex'),\n  ];\n\n  // Pass the following data to the EllipticCurve.validateSignature smart contract function\n  return {\n    messageHash,\n    signature,\n    publicKeyCoordinates,\n  };\n};\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,QAAQ;AAC/B,OAAO,KAAKC,SAAS,MAAM,yBAAyB;AACpD;AACA,SAASC,aAAa,QAAQ,oBAAoB;AAClD,SAASC,SAAS,QAAQ,uBAAuB;AAEjD,SAASC,MAAM,QAAQ,QAAQ;AAE/B,SAASC,uBAAuBA,CAACC,KAAiB,EAAW;EAC3D,OAAOA,KAAK,CAAC,CAAC,CAAC,KAAK,GAAG,IAAI,CAACA,KAAK,CAAC,CAAC,CAAC,GAAI,CAAC,IAAI,CAAE,MAAM,CAAC;AACxD;;AAEA;AACA;AACA;AACA;AACA,OAAO,MAAMC,kCAAkC,GAAGA,CAEhDC,yBAAiE,EACjEC,YAAgD,KAC7C;EACH,MAAMC,cAAc,GAAGT,SAAS,CAACU,QAAQ,CAACF,YAAY,CAACG,iBAAiB,CAAC;EACzE,MAAMC,cAAc,GAAGT,MAAM,CAACU,IAAI,CAChCd,MAAM,CAACe,MAAM,CAACd,SAAS,CAACU,QAAQ,CAACF,YAAY,CAACO,cAAc,CAAC,CAAC,CAACC,KAAK,CAAC,CAAC,CAAC,EACvE,KACF,CAAC;EAED,MAAMC,aAAa,GAAGd,MAAM,CAACe,MAAM,CAAC,CAACT,cAAc,EAAEG,cAAc,CAAC,CAAC;EACrE,MAAMO,UAAU,GAAGnB,SAAS,CAACU,QAAQ,CAACF,YAAY,CAACY,SAAS,CAAC;EAC7DC,OAAO,CAACC,GAAG,CAACH,UAAU,CAAC;;EAEvB;EACA;EACA,MAAMI,eAAe,GAAGrB,SAAS,CAACsB,KAAK,CAACL,UAAU,EAAElB,aAAa,CAAC;EAClE,IAAIwB,MAAM,GAAG,IAAIC,UAAU,CAACH,eAAe,CAACI,CAAC,CAAC;EAC9C,IAAIC,MAAM,GAAG,IAAIF,UAAU,CAACH,eAAe,CAACM,CAAC,CAAC;EAE9C,IAAIzB,uBAAuB,CAACqB,MAAM,CAAC,EAAE;IACnCA,MAAM,GAAGA,MAAM,CAACT,KAAK,CAAC,CAAC,CAAC;EAC1B;EAEA,IAAIZ,uBAAuB,CAACwB,MAAM,CAAC,EAAE;IACnCA,MAAM,GAAGA,MAAM,CAACZ,KAAK,CAAC,CAAC,CAAC;EAC1B;;EAEA;EACA,MAAMc,WAAW,GAAG/B,MAAM,CAACe,MAAM,CAACG,aAAa,CAAC;EAChD;EACA,MAAMG,SAAS,GAAG,CAAC,IAAI,GAAGjB,MAAM,CAACU,IAAI,CAACY,MAAM,CAAC,CAACM,QAAQ,CAAC,KAAK,CAAC,EAAE,IAAI,GAAG5B,MAAM,CAACU,IAAI,CAACe,MAAM,CAAC,CAACG,QAAQ,CAAC,KAAK,CAAC,CAAC;EAC1G;EACA,MAAMC,oBAAoB,GAAG,CAC3B,IAAI,GAAGhC,SAAS,CAACU,QAAQ,CAAC,CAAAH,yBAAyB,aAAzBA,yBAAyB,uBAAzBA,yBAAyB,CAAE0B,CAAC,KAAI,EAAE,CAAC,CAACF,QAAQ,CAAC,KAAK,CAAC,EAC7E,IAAI,GAAG/B,SAAS,CAACU,QAAQ,CAAC,CAAAH,yBAAyB,aAAzBA,yBAAyB,uBAAzBA,yBAAyB,CAAE2B,CAAC,KAAI,EAAE,CAAC,CAACH,QAAQ,CAAC,KAAK,CAAC,CAC9E;;EAED;EACA,OAAO;IACLD,WAAW;IACXV,SAAS;IACTY;EACF,CAAC;AACH,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}