{"ast":null,"code":"import { padString } from \"./pad_string_1\";\nimport { Buffer } from 'buffer';\nconst chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_';\n\n// Use a lookup table to find the index.\nconst lookup = new Uint8Array(256);\nfor (let i = 0; i < chars.length; i++) {\n  lookup[chars.charCodeAt(i)] = i;\n}\nexport const encode = function (arraybuffer) {\n  let bytes = new Uint8Array(arraybuffer),\n    i,\n    len = bytes.length,\n    base64 = '';\n  for (i = 0; i < len; i += 3) {\n    base64 += chars[bytes[i] >> 2];\n    base64 += chars[(bytes[i] & 3) << 4 | bytes[i + 1] >> 4];\n    base64 += chars[(bytes[i + 1] & 15) << 2 | bytes[i + 2] >> 6];\n    base64 += chars[bytes[i + 2] & 63];\n  }\n  if (len % 3 === 2) {\n    base64 = base64.substring(0, base64.length - 1);\n  } else if (len % 3 === 1) {\n    base64 = base64.substring(0, base64.length - 2);\n  }\n  return base64;\n};\nexport const decode = function (base64) {\n  let bufferLength = base64.length * 0.75,\n    len = base64.length,\n    i,\n    p = 0,\n    encoded1,\n    encoded2,\n    encoded3,\n    encoded4;\n  let arraybuffer = new ArrayBuffer(bufferLength),\n    bytes = new Uint8Array(arraybuffer);\n  for (i = 0; i < len; i += 4) {\n    encoded1 = lookup[base64.charCodeAt(i)];\n    encoded2 = lookup[base64.charCodeAt(i + 1)];\n    encoded3 = lookup[base64.charCodeAt(i + 2)];\n    encoded4 = lookup[base64.charCodeAt(i + 3)];\n    bytes[p++] = encoded1 << 2 | encoded2 >> 4;\n    bytes[p++] = (encoded2 & 15) << 4 | encoded3 >> 2;\n    bytes[p++] = (encoded3 & 3) << 6 | encoded4 & 63;\n  }\n  return arraybuffer;\n};\nexport const toBase64 = function (base64url) {\n  base64url = base64url.toString();\n  return padString(base64url).replace(/\\-/g, \"+\").replace(/_/g, \"/\");\n};\nexport const toBuffer = function (base64url) {\n  return Buffer.from(toBase64(base64url), \"base64\");\n};","map":{"version":3,"names":["padString","Buffer","chars","lookup","Uint8Array","i","length","charCodeAt","encode","arraybuffer","bytes","len","base64","substring","decode","bufferLength","p","encoded1","encoded2","encoded3","encoded4","ArrayBuffer","toBase64","base64url","toString","replace","toBuffer","from"],"sources":["/Users/peterchen/Dropbox/Hexlink/Projects/pwa-demo/src/utils/passkey/shared/base64url-arraybuffer.ts"],"sourcesContent":["import { padString } from \"./pad_string_1\";\nimport { Buffer } from 'buffer';\n\nconst chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'\n\n// Use a lookup table to find the index.\nconst lookup = new Uint8Array(256)\n\nfor (let i = 0; i < chars.length; i++) {\n  lookup[chars.charCodeAt(i)] = i\n}\n\nexport const encode = function (arraybuffer: ArrayBuffer) {\n  let bytes = new Uint8Array(arraybuffer),\n    i,\n    len = bytes.length,\n    base64 = ''\n\n  for (i = 0; i < len; i += 3) {\n    base64 += chars[bytes[i] >> 2]\n    base64 += chars[((bytes[i] & 3) << 4) | (bytes[i + 1] >> 4)]\n    base64 += chars[((bytes[i + 1] & 15) << 2) | (bytes[i + 2] >> 6)]\n    base64 += chars[bytes[i + 2] & 63]\n  }\n\n  if (len % 3 === 2) {\n    base64 = base64.substring(0, base64.length - 1)\n  } else if (len % 3 === 1) {\n    base64 = base64.substring(0, base64.length - 2)\n  }\n\n  return base64\n}\n\nexport const decode = function (base64: string) {\n  let bufferLength = base64.length * 0.75,\n    len = base64.length,\n    i,\n    p = 0,\n    encoded1,\n    encoded2,\n    encoded3,\n    encoded4\n\n  let arraybuffer = new ArrayBuffer(bufferLength),\n    bytes = new Uint8Array(arraybuffer)\n\n  for (i = 0; i < len; i += 4) {\n    encoded1 = lookup[base64.charCodeAt(i)]\n    encoded2 = lookup[base64.charCodeAt(i + 1)]\n    encoded3 = lookup[base64.charCodeAt(i + 2)]\n    encoded4 = lookup[base64.charCodeAt(i + 3)]\n\n    bytes[p++] = (encoded1 << 2) | (encoded2 >> 4)\n    bytes[p++] = ((encoded2 & 15) << 4) | (encoded3 >> 2)\n    bytes[p++] = ((encoded3 & 3) << 6) | (encoded4 & 63)\n  }\n\n  return arraybuffer\n}\n\nexport const toBase64 = function (base64url: string) {\n  base64url = base64url.toString();\n  return padString(base64url)\n    .replace(/\\-/g, \"+\")\n    .replace(/_/g, \"/\");\n}\n\nexport const toBuffer = function (base64url: string) {\n  return Buffer.from(toBase64(base64url), \"base64\");\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}