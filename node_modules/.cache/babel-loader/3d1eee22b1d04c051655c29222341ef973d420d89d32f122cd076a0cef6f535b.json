{"ast":null,"code":"import * as base64url from \"../shared/base64url-arraybuffer\";\nconst getPasskeyCredential = async (challenge, username) => {\n  let passkeyIdBuffer;\n  const loginPasskeyId = localStorage.getItem(`${username}_passkeyId`);\n  if (loginPasskeyId) {\n    passkeyIdBuffer = base64url.decode(loginPasskeyId);\n  } else {\n    passkeyIdBuffer = base64url.decode(\"\");\n  }\n  console.log(\"loginPasskeyId: \", loginPasskeyId);\n  console.log(\"passkeyIdBuffer: \", passkeyIdBuffer);\n  const challengeBuffer = Uint8Array.from(challenge, c => c.charCodeAt(0));\n  const publicKeyCredentialRequestOptions = {\n    challenge: challengeBuffer,\n    // rpId: process.env.REACT_APP_RP_DOMAIN,\n    allowCredentials: [{\n      id: passkeyIdBuffer,\n      type: \"public-key\"\n    }],\n    userVerification: \"required\",\n    timeout: 60000\n  };\n  return await navigator.credentials.get({\n    publicKey: publicKeyCredentialRequestOptions\n  });\n};\nexport default getPasskeyCredential;","map":{"version":3,"names":["base64url","getPasskeyCredential","challenge","username","passkeyIdBuffer","loginPasskeyId","localStorage","getItem","decode","console","log","challengeBuffer","Uint8Array","from","c","charCodeAt","publicKeyCredentialRequestOptions","allowCredentials","id","type","userVerification","timeout","navigator","credentials","get","publicKey"],"sources":["/Users/peterchen/Dropbox/Hexlink/pwa-demo/src/utils/passkey/authenticate/getPasskeyCredential.tsx"],"sourcesContent":["import * as base64url from \"../shared/base64url-arraybuffer\";\n\nconst getPasskeyCredential = async (challenge: string, username: string) => {\n  let passkeyIdBuffer;\n  const loginPasskeyId = localStorage.getItem(`${username}_passkeyId`);\n  if (loginPasskeyId) {\n    passkeyIdBuffer = base64url.decode(loginPasskeyId)\n  } else {\n    passkeyIdBuffer = base64url.decode(\"\")\n  }\n  console.log(\"loginPasskeyId: \", loginPasskeyId);\n  console.log(\"passkeyIdBuffer: \", passkeyIdBuffer);\n  const challengeBuffer = Uint8Array.from(challenge, (c) => c.charCodeAt(0));\n  const publicKeyCredentialRequestOptions: PublicKeyCredentialRequestOptions = {\n    challenge: challengeBuffer,\n    // rpId: process.env.REACT_APP_RP_DOMAIN,\n    allowCredentials: [\n      {\n        id: passkeyIdBuffer,\n        type: \"public-key\",\n      },\n    ],\n    userVerification: \"required\",\n    timeout: 60000,\n  };\n\n  return await navigator.credentials.get({\n    publicKey: publicKeyCredentialRequestOptions,\n  });\n};\n\nexport default getPasskeyCredential;\n"],"mappings":"AAAA,OAAO,KAAKA,SAAS,MAAM,iCAAiC;AAE5D,MAAMC,oBAAoB,GAAG,MAAAA,CAAOC,SAAiB,EAAEC,QAAgB,KAAK;EAC1E,IAAIC,eAAe;EACnB,MAAMC,cAAc,GAAGC,YAAY,CAACC,OAAO,CAAE,GAAEJ,QAAS,YAAW,CAAC;EACpE,IAAIE,cAAc,EAAE;IAClBD,eAAe,GAAGJ,SAAS,CAACQ,MAAM,CAACH,cAAc,CAAC;EACpD,CAAC,MAAM;IACLD,eAAe,GAAGJ,SAAS,CAACQ,MAAM,CAAC,EAAE,CAAC;EACxC;EACAC,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEL,cAAc,CAAC;EAC/CI,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEN,eAAe,CAAC;EACjD,MAAMO,eAAe,GAAGC,UAAU,CAACC,IAAI,CAACX,SAAS,EAAGY,CAAC,IAAKA,CAAC,CAACC,UAAU,CAAC,CAAC,CAAC,CAAC;EAC1E,MAAMC,iCAAoE,GAAG;IAC3Ed,SAAS,EAAES,eAAe;IAC1B;IACAM,gBAAgB,EAAE,CAChB;MACEC,EAAE,EAAEd,eAAe;MACnBe,IAAI,EAAE;IACR,CAAC,CACF;IACDC,gBAAgB,EAAE,UAAU;IAC5BC,OAAO,EAAE;EACX,CAAC;EAED,OAAO,MAAMC,SAAS,CAACC,WAAW,CAACC,GAAG,CAAC;IACrCC,SAAS,EAAET;EACb,CAAC,CAAC;AACJ,CAAC;AAED,eAAef,oBAAoB"},"metadata":{},"sourceType":"module","externalDependencies":[]}