{"ast":null,"code":"'use strict';\n\nconst {\n  Buffer\n} = require('buffer');\nconst NoFilter = require('nofilter');\nconst stream = require('stream');\nconst constants = require('./constants');\nconst {\n  NUMBYTES,\n  SHIFT32,\n  BI,\n  SYMS\n} = constants;\nconst MAX_SAFE_HIGH = 0x1fffff;\n\n/**\n * Convert a UTF8-encoded Buffer to a JS string.  If possible, throw an error\n * on invalid UTF8.  Byte Order Marks are not looked at or stripped.\n *\n * @private\n */\nconst td = new TextDecoder('utf8', {\n  fatal: true,\n  ignoreBOM: true\n});\nexports.utf8 = buf => td.decode(buf);\nexports.utf8.checksUTF8 = true;\nfunction isReadable(s) {\n  // Is this a readable stream?  In the webpack version, instanceof isn't\n  // working correctly.\n  if (s instanceof stream.Readable) {\n    return true;\n  }\n  return ['read', 'on', 'pipe'].every(f => typeof s[f] === 'function');\n}\nexports.isBufferish = function isBufferish(b) {\n  return b && typeof b === 'object' && (Buffer.isBuffer(b) || b instanceof Uint8Array || b instanceof Uint8ClampedArray || b instanceof ArrayBuffer || b instanceof DataView);\n};\nexports.bufferishToBuffer = function bufferishToBuffer(b) {\n  if (Buffer.isBuffer(b)) {\n    return b;\n  } else if (ArrayBuffer.isView(b)) {\n    return Buffer.from(b.buffer, b.byteOffset, b.byteLength);\n  } else if (b instanceof ArrayBuffer) {\n    return Buffer.from(b);\n  }\n  return null;\n};\nexports.parseCBORint = function parseCBORint(ai, buf) {\n  switch (ai) {\n    case NUMBYTES.ONE:\n      return buf.readUInt8(0);\n    case NUMBYTES.TWO:\n      return buf.readUInt16BE(0);\n    case NUMBYTES.FOUR:\n      return buf.readUInt32BE(0);\n    case NUMBYTES.EIGHT:\n      {\n        const f = buf.readUInt32BE(0);\n        const g = buf.readUInt32BE(4);\n        if (f > MAX_SAFE_HIGH) {\n          return BigInt(f) * BI.SHIFT32 + BigInt(g);\n        }\n        return f * SHIFT32 + g;\n      }\n    default:\n      throw new Error(`Invalid additional info for int: ${ai}`);\n  }\n};\nexports.writeHalf = function writeHalf(buf, half) {\n  // Assume 0, -0, NaN, Infinity, and -Infinity have already been caught\n\n  // HACK: everyone settle in.  This isn't going to be pretty.\n  // Translate cn-cbor's C code (from Carsten Borman):\n\n  // uint32_t be32;\n  // uint16_t be16, u16;\n  // union {\n  //   float f;\n  //   uint32_t u;\n  // } u32;\n  // u32.f = float_val;\n\n  const u32 = Buffer.allocUnsafe(4);\n  u32.writeFloatBE(half, 0);\n  const u = u32.readUInt32BE(0);\n\n  // If ((u32.u & 0x1FFF) == 0) { /* worth trying half */\n\n  // hildjj: If the lower 13 bits aren't 0,\n  // we will lose precision in the conversion.\n  // mant32 = 24bits, mant16 = 11bits, 24-11 = 13\n  if ((u & 0x1FFF) !== 0) {\n    return false;\n  }\n\n  // Sign, exponent, mantissa\n  //   int s16 = (u32.u >> 16) & 0x8000;\n  //   int exp = (u32.u >> 23) & 0xff;\n  //   int mant = u32.u & 0x7fffff;\n\n  let s16 = u >> 16 & 0x8000; // Top bit is sign\n  const exp = u >> 23 & 0xff; // Then 5 bits of exponent\n  const mant = u & 0x7fffff;\n\n  // Hildjj: zeros already handled.  Assert if you don't believe me.\n  //   if (exp == 0 && mant == 0)\n  //     ;              /* 0.0, -0.0 */\n\n  //   else if (exp >= 113 && exp <= 142) /* normalized */\n  //     s16 += ((exp - 112) << 10) + (mant >> 13);\n\n  if (exp >= 113 && exp <= 142) {\n    s16 += (exp - 112 << 10) + (mant >> 13);\n  } else if (exp >= 103 && exp < 113) {\n    // Denormalized numbers\n    //   else if (exp >= 103 && exp < 113) { /* denorm, exp16 = 0 */\n    //     if (mant & ((1 << (126 - exp)) - 1))\n    //       goto float32;         /* loss of precision */\n    //     s16 += ((mant + 0x800000) >> (126 - exp));\n\n    if (mant & (1 << 126 - exp) - 1) {\n      return false;\n    }\n    s16 += mant + 0x800000 >> 126 - exp;\n  } else {\n    //   } else if (exp == 255 && mant == 0) { /* Inf */\n    //     s16 += 0x7c00;\n\n    // hildjj: Infinity already handled\n\n    //   } else\n    //     goto float32;           /* loss of range */\n\n    return false;\n  }\n\n  // Done\n  //   ensure_writable(3);\n  //   u16 = s16;\n  //   be16 = hton16p((const uint8_t*)&u16);\n  buf.writeUInt16BE(s16);\n  return true;\n};\nexports.parseHalf = function parseHalf(buf) {\n  const sign = buf[0] & 0x80 ? -1 : 1;\n  const exp = (buf[0] & 0x7C) >> 2;\n  const mant = (buf[0] & 0x03) << 8 | buf[1];\n  if (!exp) {\n    return sign * 5.9604644775390625e-8 * mant;\n  } else if (exp === 0x1f) {\n    return sign * (mant ? NaN : Infinity);\n  }\n  return sign * 2 ** (exp - 25) * (1024 + mant);\n};\nexports.parseCBORfloat = function parseCBORfloat(buf) {\n  switch (buf.length) {\n    case 2:\n      return exports.parseHalf(buf);\n    case 4:\n      return buf.readFloatBE(0);\n    case 8:\n      return buf.readDoubleBE(0);\n    default:\n      throw new Error(`Invalid float size: ${buf.length}`);\n  }\n};\nexports.hex = function hex(s) {\n  return Buffer.from(s.replace(/^0x/, ''), 'hex');\n};\nexports.bin = function bin(s) {\n  s = s.replace(/\\s/g, '');\n  let start = 0;\n  let end = s.length % 8 || 8;\n  const chunks = [];\n  while (end <= s.length) {\n    chunks.push(parseInt(s.slice(start, end), 2));\n    start = end;\n    end += 8;\n  }\n  return Buffer.from(chunks);\n};\nexports.arrayEqual = function arrayEqual(a, b) {\n  if (a == null && b == null) {\n    return true;\n  }\n  if (a == null || b == null) {\n    return false;\n  }\n  return a.length === b.length && a.every((elem, i) => elem === b[i]);\n};\nexports.bufferToBigInt = function bufferToBigInt(buf) {\n  return BigInt(`0x${buf.toString('hex')}`);\n};\nexports.cborValueToString = function cborValueToString(val, float_bytes = -1) {\n  switch (typeof val) {\n    case 'symbol':\n      {\n        switch (val) {\n          case SYMS.NULL:\n            return 'null';\n          case SYMS.UNDEFINED:\n            return 'undefined';\n          case SYMS.BREAK:\n            return 'BREAK';\n        }\n        // Impossible in node 10\n        /* istanbul ignore if */\n        if (val.description) {\n          return val.description;\n        }\n        // On node10, Symbol doesn't have description.  Parse it out of the\n        // toString value, which looks like `Symbol(foo)`.\n        const s = val.toString();\n        const m = s.match(/^Symbol\\((?<name>.*)\\)/);\n        /* istanbul ignore if */\n        if (m && m.groups.name) {\n          // Impossible in node 12+\n          /* istanbul ignore next */\n          return m.groups.name;\n        }\n        return 'Symbol';\n      }\n    case 'string':\n      return JSON.stringify(val);\n    case 'bigint':\n      return val.toString();\n    case 'number':\n      {\n        const s = Object.is(val, -0) ? '-0' : String(val);\n        return float_bytes > 0 ? `${s}_${float_bytes}` : s;\n      }\n    case 'object':\n      {\n        // A null should be caught above\n        const buf = exports.bufferishToBuffer(val);\n        if (buf) {\n          const hex = buf.toString('hex');\n          return float_bytes === -Infinity ? hex : `h'${hex}'`;\n        }\n        if (typeof val[Symbol.for('nodejs.util.inspect.custom')] === 'function') {\n          return val[Symbol.for('nodejs.util.inspect.custom')]();\n        }\n        // Shouldn't get non-empty arrays here\n        if (Array.isArray(val)) {\n          return '[]';\n        }\n        // This should be all that is left\n        return '{}';\n      }\n  }\n  return String(val);\n};\nexports.guessEncoding = function guessEncoding(input, encoding) {\n  if (typeof input === 'string') {\n    return new NoFilter(input, encoding == null ? 'hex' : encoding);\n  }\n  const buf = exports.bufferishToBuffer(input);\n  if (buf) {\n    return new NoFilter(buf);\n  }\n  if (isReadable(input)) {\n    return input;\n  }\n  throw new Error('Unknown input type');\n};\nconst B64URL_SWAPS = {\n  '=': '',\n  '+': '-',\n  '/': '_'\n};\n\n/**\n * @param {Buffer|Uint8Array|Uint8ClampedArray|ArrayBuffer|DataView} buf\n *   Buffer to convert.\n * @returns {string} Base64url string.\n * @private\n */\nexports.base64url = function base64url(buf) {\n  return exports.bufferishToBuffer(buf).toString('base64').replace(/[=+/]/g, c => B64URL_SWAPS[c]);\n};\n\n/**\n * @param {Buffer|Uint8Array|Uint8ClampedArray|ArrayBuffer|DataView} buf\n *   Buffer to convert.\n * @returns {string} Base64 string.\n * @private\n */\nexports.base64 = function base64(buf) {\n  return exports.bufferishToBuffer(buf).toString('base64');\n};\nexports.isBigEndian = function isBigEndian() {\n  const array = new Uint8Array(4);\n  const view = new Uint32Array(array.buffer);\n  return !((view[0] = 1) & array[0]);\n};","map":{"version":3,"names":["Buffer","require","NoFilter","stream","constants","NUMBYTES","SHIFT32","BI","SYMS","MAX_SAFE_HIGH","td","TextDecoder","fatal","ignoreBOM","exports","utf8","buf","decode","checksUTF8","isReadable","s","Readable","every","f","isBufferish","b","isBuffer","Uint8Array","Uint8ClampedArray","ArrayBuffer","DataView","bufferishToBuffer","isView","from","buffer","byteOffset","byteLength","parseCBORint","ai","ONE","readUInt8","TWO","readUInt16BE","FOUR","readUInt32BE","EIGHT","g","BigInt","Error","writeHalf","half","u32","allocUnsafe","writeFloatBE","u","s16","exp","mant","writeUInt16BE","parseHalf","sign","NaN","Infinity","parseCBORfloat","length","readFloatBE","readDoubleBE","hex","replace","bin","start","end","chunks","push","parseInt","slice","arrayEqual","a","elem","i","bufferToBigInt","toString","cborValueToString","val","float_bytes","NULL","UNDEFINED","BREAK","description","m","match","groups","name","JSON","stringify","Object","is","String","Symbol","for","Array","isArray","guessEncoding","input","encoding","B64URL_SWAPS","base64url","c","base64","isBigEndian","array","view","Uint32Array"],"sources":["/Users/peterchen/Dropbox/Hexlink/pwa-demo/node_modules/cbor/lib/utils.js"],"sourcesContent":["'use strict'\n\nconst {Buffer} = require('buffer')\nconst NoFilter = require('nofilter')\nconst stream = require('stream')\nconst constants = require('./constants')\nconst {NUMBYTES, SHIFT32, BI, SYMS} = constants\nconst MAX_SAFE_HIGH = 0x1fffff\n\n/**\n * Convert a UTF8-encoded Buffer to a JS string.  If possible, throw an error\n * on invalid UTF8.  Byte Order Marks are not looked at or stripped.\n *\n * @private\n */\nconst td = new TextDecoder('utf8', {fatal: true, ignoreBOM: true})\nexports.utf8 = buf => td.decode(buf)\nexports.utf8.checksUTF8 = true\n\nfunction isReadable(s) {\n  // Is this a readable stream?  In the webpack version, instanceof isn't\n  // working correctly.\n  if (s instanceof stream.Readable) {\n    return true\n  }\n  return ['read', 'on', 'pipe'].every(f => typeof s[f] === 'function')\n}\n\nexports.isBufferish = function isBufferish(b) {\n  return b &&\n    (typeof b === 'object') &&\n    ((Buffer.isBuffer(b)) ||\n      (b instanceof Uint8Array) ||\n      (b instanceof Uint8ClampedArray) ||\n      (b instanceof ArrayBuffer) ||\n      (b instanceof DataView))\n}\n\nexports.bufferishToBuffer = function bufferishToBuffer(b) {\n  if (Buffer.isBuffer(b)) {\n    return b\n  } else if (ArrayBuffer.isView(b)) {\n    return Buffer.from(b.buffer, b.byteOffset, b.byteLength)\n  } else if (b instanceof ArrayBuffer) {\n    return Buffer.from(b)\n  }\n  return null\n}\n\nexports.parseCBORint = function parseCBORint(ai, buf) {\n  switch (ai) {\n    case NUMBYTES.ONE:\n      return buf.readUInt8(0)\n    case NUMBYTES.TWO:\n      return buf.readUInt16BE(0)\n    case NUMBYTES.FOUR:\n      return buf.readUInt32BE(0)\n    case NUMBYTES.EIGHT: {\n      const f = buf.readUInt32BE(0)\n      const g = buf.readUInt32BE(4)\n      if (f > MAX_SAFE_HIGH) {\n        return (BigInt(f) * BI.SHIFT32) + BigInt(g)\n      }\n      return (f * SHIFT32) + g\n    }\n    default:\n      throw new Error(`Invalid additional info for int: ${ai}`)\n  }\n}\n\nexports.writeHalf = function writeHalf(buf, half) {\n  // Assume 0, -0, NaN, Infinity, and -Infinity have already been caught\n\n  // HACK: everyone settle in.  This isn't going to be pretty.\n  // Translate cn-cbor's C code (from Carsten Borman):\n\n  // uint32_t be32;\n  // uint16_t be16, u16;\n  // union {\n  //   float f;\n  //   uint32_t u;\n  // } u32;\n  // u32.f = float_val;\n\n  const u32 = Buffer.allocUnsafe(4)\n  u32.writeFloatBE(half, 0)\n  const u = u32.readUInt32BE(0)\n\n  // If ((u32.u & 0x1FFF) == 0) { /* worth trying half */\n\n  // hildjj: If the lower 13 bits aren't 0,\n  // we will lose precision in the conversion.\n  // mant32 = 24bits, mant16 = 11bits, 24-11 = 13\n  if ((u & 0x1FFF) !== 0) {\n    return false\n  }\n\n  // Sign, exponent, mantissa\n  //   int s16 = (u32.u >> 16) & 0x8000;\n  //   int exp = (u32.u >> 23) & 0xff;\n  //   int mant = u32.u & 0x7fffff;\n\n  let s16 = (u >> 16) & 0x8000 // Top bit is sign\n  const exp = (u >> 23) & 0xff // Then 5 bits of exponent\n  const mant = u & 0x7fffff\n\n  // Hildjj: zeros already handled.  Assert if you don't believe me.\n  //   if (exp == 0 && mant == 0)\n  //     ;              /* 0.0, -0.0 */\n\n  //   else if (exp >= 113 && exp <= 142) /* normalized */\n  //     s16 += ((exp - 112) << 10) + (mant >> 13);\n\n  if ((exp >= 113) && (exp <= 142)) {\n    s16 += ((exp - 112) << 10) + (mant >> 13)\n  } else if ((exp >= 103) && (exp < 113)) {\n    // Denormalized numbers\n    //   else if (exp >= 103 && exp < 113) { /* denorm, exp16 = 0 */\n    //     if (mant & ((1 << (126 - exp)) - 1))\n    //       goto float32;         /* loss of precision */\n    //     s16 += ((mant + 0x800000) >> (126 - exp));\n\n    if (mant & ((1 << (126 - exp)) - 1)) {\n      return false\n    }\n    s16 += ((mant + 0x800000) >> (126 - exp))\n  } else {\n  //   } else if (exp == 255 && mant == 0) { /* Inf */\n  //     s16 += 0x7c00;\n\n    // hildjj: Infinity already handled\n\n    //   } else\n    //     goto float32;           /* loss of range */\n\n    return false\n  }\n\n  // Done\n  //   ensure_writable(3);\n  //   u16 = s16;\n  //   be16 = hton16p((const uint8_t*)&u16);\n  buf.writeUInt16BE(s16)\n  return true\n}\n\nexports.parseHalf = function parseHalf(buf) {\n  const sign = buf[0] & 0x80 ? -1 : 1\n  const exp = (buf[0] & 0x7C) >> 2\n  const mant = ((buf[0] & 0x03) << 8) | buf[1]\n  if (!exp) {\n    return sign * 5.9604644775390625e-8 * mant\n  } else if (exp === 0x1f) {\n    return sign * (mant ? NaN : Infinity)\n  }\n  return sign * (2 ** (exp - 25)) * (1024 + mant)\n}\n\nexports.parseCBORfloat = function parseCBORfloat(buf) {\n  switch (buf.length) {\n    case 2:\n      return exports.parseHalf(buf)\n    case 4:\n      return buf.readFloatBE(0)\n    case 8:\n      return buf.readDoubleBE(0)\n    default:\n      throw new Error(`Invalid float size: ${buf.length}`)\n  }\n}\n\nexports.hex = function hex(s) {\n  return Buffer.from(s.replace(/^0x/, ''), 'hex')\n}\n\nexports.bin = function bin(s) {\n  s = s.replace(/\\s/g, '')\n  let start = 0\n  let end = (s.length % 8) || 8\n  const chunks = []\n  while (end <= s.length) {\n    chunks.push(parseInt(s.slice(start, end), 2))\n    start = end\n    end += 8\n  }\n  return Buffer.from(chunks)\n}\n\nexports.arrayEqual = function arrayEqual(a, b) {\n  if ((a == null) && (b == null)) {\n    return true\n  }\n  if ((a == null) || (b == null)) {\n    return false\n  }\n  return (a.length === b.length) && a.every((elem, i) => elem === b[i])\n}\n\nexports.bufferToBigInt = function bufferToBigInt(buf) {\n  return BigInt(`0x${buf.toString('hex')}`)\n}\n\nexports.cborValueToString = function cborValueToString(val, float_bytes = -1) {\n  switch (typeof val) {\n    case 'symbol': {\n      switch (val) {\n        case SYMS.NULL:\n          return 'null'\n        case SYMS.UNDEFINED:\n          return 'undefined'\n        case SYMS.BREAK:\n          return 'BREAK'\n      }\n      // Impossible in node 10\n      /* istanbul ignore if */\n      if (val.description) {\n        return val.description\n      }\n      // On node10, Symbol doesn't have description.  Parse it out of the\n      // toString value, which looks like `Symbol(foo)`.\n      const s = val.toString()\n      const m = s.match(/^Symbol\\((?<name>.*)\\)/)\n      /* istanbul ignore if */\n      if (m && m.groups.name) {\n        // Impossible in node 12+\n        /* istanbul ignore next */\n        return m.groups.name\n      }\n      return 'Symbol'\n    }\n    case 'string':\n      return JSON.stringify(val)\n    case 'bigint':\n      return val.toString()\n    case 'number': {\n      const s = Object.is(val, -0) ? '-0' : String(val)\n      return (float_bytes > 0) ? `${s}_${float_bytes}` : s\n    }\n    case 'object': {\n      // A null should be caught above\n      const buf = exports.bufferishToBuffer(val)\n      if (buf) {\n        const hex = buf.toString('hex')\n        return (float_bytes === -Infinity) ? hex : `h'${hex}'`\n      }\n      if (typeof val[Symbol.for('nodejs.util.inspect.custom')] === 'function') {\n        return val[Symbol.for('nodejs.util.inspect.custom')]()\n      }\n      // Shouldn't get non-empty arrays here\n      if (Array.isArray(val)) {\n        return '[]'\n      }\n      // This should be all that is left\n      return '{}'\n    }\n  }\n  return String(val)\n}\n\nexports.guessEncoding = function guessEncoding(input, encoding) {\n  if (typeof input === 'string') {\n    return new NoFilter(input, (encoding == null) ? 'hex' : encoding)\n  }\n  const buf = exports.bufferishToBuffer(input)\n  if (buf) {\n    return new NoFilter(buf)\n  }\n  if (isReadable(input)) {\n    return input\n  }\n  throw new Error('Unknown input type')\n}\n\nconst B64URL_SWAPS = {\n  '=': '',\n  '+': '-',\n  '/': '_',\n}\n\n/**\n * @param {Buffer|Uint8Array|Uint8ClampedArray|ArrayBuffer|DataView} buf\n *   Buffer to convert.\n * @returns {string} Base64url string.\n * @private\n */\nexports.base64url = function base64url(buf) {\n  return exports.bufferishToBuffer(buf)\n    .toString('base64')\n    .replace(/[=+/]/g, c => B64URL_SWAPS[c])\n}\n\n/**\n * @param {Buffer|Uint8Array|Uint8ClampedArray|ArrayBuffer|DataView} buf\n *   Buffer to convert.\n * @returns {string} Base64 string.\n * @private\n */\nexports.base64 = function base64(buf) {\n  return exports.bufferishToBuffer(buf).toString('base64')\n}\n\nexports.isBigEndian = function isBigEndian() {\n  const array = new Uint8Array(4)\n  const view = new Uint32Array(array.buffer)\n  return !((view[0] = 1) & array[0])\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}