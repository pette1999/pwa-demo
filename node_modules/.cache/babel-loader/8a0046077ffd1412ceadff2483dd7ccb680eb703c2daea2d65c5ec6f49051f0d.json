{"ast":null,"code":"import * as asn1js from \"asn1js\";\nimport { AsnPropTypes, AsnTypeTypes } from \"./enums\";\nimport { isConvertible } from \"./helper\";\nexport class AsnSchemaStorage {\n  constructor() {\n    this.items = new WeakMap();\n  }\n  has(target) {\n    return this.items.has(target);\n  }\n  get(target, checkSchema = false) {\n    const schema = this.items.get(target);\n    if (!schema) {\n      throw new Error(`Cannot get schema for '${target.prototype.constructor.name}' target`);\n    }\n    if (checkSchema && !schema.schema) {\n      throw new Error(`Schema '${target.prototype.constructor.name}' doesn't contain ASN.1 schema. Call 'AsnSchemaStorage.cache'.`);\n    }\n    return schema;\n  }\n  cache(target) {\n    const schema = this.get(target);\n    if (!schema.schema) {\n      schema.schema = this.create(target, true);\n    }\n  }\n  createDefault(target) {\n    const schema = {\n      type: AsnTypeTypes.Sequence,\n      items: {}\n    };\n    const parentSchema = this.findParentSchema(target);\n    if (parentSchema) {\n      Object.assign(schema, parentSchema);\n      schema.items = Object.assign({}, schema.items, parentSchema.items);\n    }\n    return schema;\n  }\n  create(target, useNames) {\n    const schema = this.items.get(target) || this.createDefault(target);\n    const asn1Value = [];\n    for (const key in schema.items) {\n      const item = schema.items[key];\n      const name = useNames ? key : \"\";\n      let asn1Item;\n      if (typeof item.type === \"number\") {\n        const Asn1TypeName = AsnPropTypes[item.type];\n        const Asn1Type = asn1js[Asn1TypeName];\n        if (!Asn1Type) {\n          throw new Error(`Cannot get ASN1 class by name '${Asn1TypeName}'`);\n        }\n        asn1Item = new Asn1Type({\n          name\n        });\n      } else if (isConvertible(item.type)) {\n        const instance = new item.type();\n        asn1Item = instance.toSchema(name);\n      } else if (item.optional) {\n        const itemSchema = this.get(item.type);\n        if (itemSchema.type === AsnTypeTypes.Choice) {\n          asn1Item = new asn1js.Any({\n            name\n          });\n        } else {\n          asn1Item = this.create(item.type, false);\n          asn1Item.name = name;\n        }\n      } else {\n        asn1Item = new asn1js.Any({\n          name\n        });\n      }\n      const optional = !!item.optional || item.defaultValue !== undefined;\n      if (item.repeated) {\n        asn1Item.name = \"\";\n        const Container = item.repeated === \"set\" ? asn1js.Set : asn1js.Sequence;\n        asn1Item = new Container({\n          name: \"\",\n          value: [new asn1js.Repeated({\n            name,\n            value: asn1Item\n          })]\n        });\n      }\n      if (item.context !== null && item.context !== undefined) {\n        if (item.implicit) {\n          if (typeof item.type === \"number\" || isConvertible(item.type)) {\n            const Container = item.repeated ? asn1js.Constructed : asn1js.Primitive;\n            asn1Value.push(new Container({\n              name,\n              optional,\n              idBlock: {\n                tagClass: 3,\n                tagNumber: item.context\n              }\n            }));\n          } else {\n            this.cache(item.type);\n            const isRepeated = !!item.repeated;\n            let value = !isRepeated ? this.get(item.type, true).schema : asn1Item;\n            value = \"valueBlock\" in value ? value.valueBlock.value : value.value;\n            asn1Value.push(new asn1js.Constructed({\n              name: !isRepeated ? name : \"\",\n              optional,\n              idBlock: {\n                tagClass: 3,\n                tagNumber: item.context\n              },\n              value: value\n            }));\n          }\n        } else {\n          asn1Value.push(new asn1js.Constructed({\n            optional,\n            idBlock: {\n              tagClass: 3,\n              tagNumber: item.context\n            },\n            value: [asn1Item]\n          }));\n        }\n      } else {\n        asn1Item.optional = optional;\n        asn1Value.push(asn1Item);\n      }\n    }\n    switch (schema.type) {\n      case AsnTypeTypes.Sequence:\n        return new asn1js.Sequence({\n          value: asn1Value,\n          name: \"\"\n        });\n      case AsnTypeTypes.Set:\n        return new asn1js.Set({\n          value: asn1Value,\n          name: \"\"\n        });\n      case AsnTypeTypes.Choice:\n        return new asn1js.Choice({\n          value: asn1Value,\n          name: \"\"\n        });\n      default:\n        throw new Error(`Unsupported ASN1 type in use`);\n    }\n  }\n  set(target, schema) {\n    this.items.set(target, schema);\n    return this;\n  }\n  findParentSchema(target) {\n    const parent = Object.getPrototypeOf(target);\n    if (parent) {\n      const schema = this.items.get(parent);\n      return schema || this.findParentSchema(parent);\n    }\n    return null;\n  }\n}","map":{"version":3,"names":["asn1js","AsnPropTypes","AsnTypeTypes","isConvertible","AsnSchemaStorage","constructor","items","WeakMap","has","target","get","checkSchema","schema","Error","prototype","name","cache","create","createDefault","type","Sequence","parentSchema","findParentSchema","Object","assign","useNames","asn1Value","key","item","asn1Item","Asn1TypeName","Asn1Type","instance","toSchema","optional","itemSchema","Choice","Any","defaultValue","undefined","repeated","Container","Set","value","Repeated","context","implicit","Constructed","Primitive","push","idBlock","tagClass","tagNumber","isRepeated","valueBlock","set","parent","getPrototypeOf"],"sources":["/Users/peterchen/Dropbox/Hexlink/Projects/pwa-demo/node_modules/@peculiar/asn1-schema/build/es2015/schema.js"],"sourcesContent":["import * as asn1js from \"asn1js\";\nimport { AsnPropTypes, AsnTypeTypes } from \"./enums\";\nimport { isConvertible } from \"./helper\";\nexport class AsnSchemaStorage {\n    constructor() {\n        this.items = new WeakMap();\n    }\n    has(target) {\n        return this.items.has(target);\n    }\n    get(target, checkSchema = false) {\n        const schema = this.items.get(target);\n        if (!schema) {\n            throw new Error(`Cannot get schema for '${target.prototype.constructor.name}' target`);\n        }\n        if (checkSchema && !schema.schema) {\n            throw new Error(`Schema '${target.prototype.constructor.name}' doesn't contain ASN.1 schema. Call 'AsnSchemaStorage.cache'.`);\n        }\n        return schema;\n    }\n    cache(target) {\n        const schema = this.get(target);\n        if (!schema.schema) {\n            schema.schema = this.create(target, true);\n        }\n    }\n    createDefault(target) {\n        const schema = {\n            type: AsnTypeTypes.Sequence,\n            items: {},\n        };\n        const parentSchema = this.findParentSchema(target);\n        if (parentSchema) {\n            Object.assign(schema, parentSchema);\n            schema.items = Object.assign({}, schema.items, parentSchema.items);\n        }\n        return schema;\n    }\n    create(target, useNames) {\n        const schema = this.items.get(target) || this.createDefault(target);\n        const asn1Value = [];\n        for (const key in schema.items) {\n            const item = schema.items[key];\n            const name = useNames ? key : \"\";\n            let asn1Item;\n            if (typeof (item.type) === \"number\") {\n                const Asn1TypeName = AsnPropTypes[item.type];\n                const Asn1Type = asn1js[Asn1TypeName];\n                if (!Asn1Type) {\n                    throw new Error(`Cannot get ASN1 class by name '${Asn1TypeName}'`);\n                }\n                asn1Item = new Asn1Type({ name });\n            }\n            else if (isConvertible(item.type)) {\n                const instance = new item.type();\n                asn1Item = instance.toSchema(name);\n            }\n            else if (item.optional) {\n                const itemSchema = this.get(item.type);\n                if (itemSchema.type === AsnTypeTypes.Choice) {\n                    asn1Item = new asn1js.Any({ name });\n                }\n                else {\n                    asn1Item = this.create(item.type, false);\n                    asn1Item.name = name;\n                }\n            }\n            else {\n                asn1Item = new asn1js.Any({ name });\n            }\n            const optional = !!item.optional || item.defaultValue !== undefined;\n            if (item.repeated) {\n                asn1Item.name = \"\";\n                const Container = item.repeated === \"set\"\n                    ? asn1js.Set\n                    : asn1js.Sequence;\n                asn1Item = new Container({\n                    name: \"\",\n                    value: [\n                        new asn1js.Repeated({\n                            name,\n                            value: asn1Item,\n                        }),\n                    ],\n                });\n            }\n            if (item.context !== null && item.context !== undefined) {\n                if (item.implicit) {\n                    if (typeof item.type === \"number\" || isConvertible(item.type)) {\n                        const Container = item.repeated\n                            ? asn1js.Constructed\n                            : asn1js.Primitive;\n                        asn1Value.push(new Container({\n                            name,\n                            optional,\n                            idBlock: {\n                                tagClass: 3,\n                                tagNumber: item.context,\n                            },\n                        }));\n                    }\n                    else {\n                        this.cache(item.type);\n                        const isRepeated = !!item.repeated;\n                        let value = !isRepeated\n                            ? this.get(item.type, true).schema\n                            : asn1Item;\n                        value = \"valueBlock\" in value ? value.valueBlock.value : value.value;\n                        asn1Value.push(new asn1js.Constructed({\n                            name: !isRepeated ? name : \"\",\n                            optional,\n                            idBlock: {\n                                tagClass: 3,\n                                tagNumber: item.context,\n                            },\n                            value: value,\n                        }));\n                    }\n                }\n                else {\n                    asn1Value.push(new asn1js.Constructed({\n                        optional,\n                        idBlock: {\n                            tagClass: 3,\n                            tagNumber: item.context,\n                        },\n                        value: [asn1Item],\n                    }));\n                }\n            }\n            else {\n                asn1Item.optional = optional;\n                asn1Value.push(asn1Item);\n            }\n        }\n        switch (schema.type) {\n            case AsnTypeTypes.Sequence:\n                return new asn1js.Sequence({ value: asn1Value, name: \"\" });\n            case AsnTypeTypes.Set:\n                return new asn1js.Set({ value: asn1Value, name: \"\" });\n            case AsnTypeTypes.Choice:\n                return new asn1js.Choice({ value: asn1Value, name: \"\" });\n            default:\n                throw new Error(`Unsupported ASN1 type in use`);\n        }\n    }\n    set(target, schema) {\n        this.items.set(target, schema);\n        return this;\n    }\n    findParentSchema(target) {\n        const parent = Object.getPrototypeOf(target);\n        if (parent) {\n            const schema = this.items.get(parent);\n            return schema || this.findParentSchema(parent);\n        }\n        return null;\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}