{"ast":null,"code":"'use strict';\n\nconst Commented = require('./commented');\nconst Diagnose = require('./diagnose');\nconst Decoder = require('./decoder');\nconst Encoder = require('./encoder');\nconst Simple = require('./simple');\nconst Tagged = require('./tagged');\nconst Map = require('./map');\nconst SharedValueEncoder = require('./sharedValueEncoder');\nmodule.exports = {\n  Commented,\n  Diagnose,\n  Decoder,\n  Encoder,\n  Simple,\n  Tagged,\n  Map,\n  SharedValueEncoder,\n  /**\n   * Convenience name for {@linkcode Commented.comment}.\n   */\n  comment: Commented.comment,\n  /**\n   * Convenience name for {@linkcode Decoder.decodeAll}.\n   */\n  decodeAll: Decoder.decodeAll,\n  /**\n   * Convenience name for {@linkcode Decoder.decodeFirst}.\n   */\n  decodeFirst: Decoder.decodeFirst,\n  /**\n   * Convenience name for {@linkcode Decoder.decodeAllSync}.\n   */\n  decodeAllSync: Decoder.decodeAllSync,\n  /**\n   * Convenience name for {@linkcode Decoder.decodeFirstSync}.\n   */\n  decodeFirstSync: Decoder.decodeFirstSync,\n  /**\n   * Convenience name for {@linkcode Diagnose.diagnose}.\n   */\n  diagnose: Diagnose.diagnose,\n  /**\n   * Convenience name for {@linkcode Encoder.encode}.\n   */\n  encode: Encoder.encode,\n  /**\n   * Convenience name for {@linkcode Encoder.encodeCanonical}.\n   */\n  encodeCanonical: Encoder.encodeCanonical,\n  /**\n   * Convenience name for {@linkcode Encoder.encodeOne}.\n   */\n  encodeOne: Encoder.encodeOne,\n  /**\n   * Convenience name for {@linkcode Encoder.encodeAsync}.\n   */\n  encodeAsync: Encoder.encodeAsync,\n  /**\n   * Convenience name for {@linkcode Decoder.decodeFirstSync}.\n   */\n  decode: Decoder.decodeFirstSync,\n  /**\n   * The codec information for\n   * {@link https://github.com/Level/encoding-down encoding-down}, which is a\n   * codec framework for leveldb.  CBOR is a particularly convenient format for\n   * both keys and values, as it can deal with a lot of types that JSON can't\n   * handle without losing type information.\n   *\n   * @example\n   * const level = require('level')\n   * const cbor = require('cbor')\n   *\n   * async function putget() {\n   *   const db = level('./db', {\n   *     keyEncoding: cbor.leveldb,\n   *     valueEncoding: cbor.leveldb,\n   *   })\n   *\n   *   await db.put({a: 1}, 9857298342094820394820394820398234092834n)\n   *   const val = await db.get({a: 1})\n   * }\n   */\n  leveldb: {\n    decode: Decoder.decodeFirstSync,\n    encode: Encoder.encode,\n    buffer: true,\n    name: 'cbor'\n  },\n  /**\n   * Reset everything that we can predict a plugin might have altered in good\n   * faith.  For now that includes the default set of tags that decoding and\n   * encoding will use.\n   */\n  reset() {\n    Encoder.reset();\n    Tagged.reset();\n  }\n};","map":{"version":3,"names":["Commented","require","Diagnose","Decoder","Encoder","Simple","Tagged","Map","SharedValueEncoder","module","exports","comment","decodeAll","decodeFirst","decodeAllSync","decodeFirstSync","diagnose","encode","encodeCanonical","encodeOne","encodeAsync","decode","leveldb","buffer","name","reset"],"sources":["/Users/peterchen/Dropbox/Hexlink/pwa-demo/node_modules/cbor/lib/cbor.js"],"sourcesContent":["'use strict'\n\nconst Commented = require('./commented')\nconst Diagnose = require('./diagnose')\nconst Decoder = require('./decoder')\nconst Encoder = require('./encoder')\nconst Simple = require('./simple')\nconst Tagged = require('./tagged')\nconst Map = require('./map')\nconst SharedValueEncoder = require('./sharedValueEncoder')\n\nmodule.exports = {\n  Commented,\n  Diagnose,\n  Decoder,\n  Encoder,\n  Simple,\n  Tagged,\n  Map,\n  SharedValueEncoder,\n\n  /**\n   * Convenience name for {@linkcode Commented.comment}.\n   */\n  comment: Commented.comment,\n\n  /**\n   * Convenience name for {@linkcode Decoder.decodeAll}.\n   */\n  decodeAll: Decoder.decodeAll,\n\n  /**\n   * Convenience name for {@linkcode Decoder.decodeFirst}.\n   */\n  decodeFirst: Decoder.decodeFirst,\n\n  /**\n   * Convenience name for {@linkcode Decoder.decodeAllSync}.\n   */\n  decodeAllSync: Decoder.decodeAllSync,\n\n  /**\n   * Convenience name for {@linkcode Decoder.decodeFirstSync}.\n   */\n  decodeFirstSync: Decoder.decodeFirstSync,\n\n  /**\n   * Convenience name for {@linkcode Diagnose.diagnose}.\n   */\n  diagnose: Diagnose.diagnose,\n\n  /**\n   * Convenience name for {@linkcode Encoder.encode}.\n   */\n  encode: Encoder.encode,\n\n  /**\n   * Convenience name for {@linkcode Encoder.encodeCanonical}.\n   */\n  encodeCanonical: Encoder.encodeCanonical,\n\n  /**\n   * Convenience name for {@linkcode Encoder.encodeOne}.\n   */\n  encodeOne: Encoder.encodeOne,\n\n  /**\n   * Convenience name for {@linkcode Encoder.encodeAsync}.\n   */\n  encodeAsync: Encoder.encodeAsync,\n\n  /**\n   * Convenience name for {@linkcode Decoder.decodeFirstSync}.\n   */\n  decode: Decoder.decodeFirstSync,\n\n  /**\n   * The codec information for\n   * {@link https://github.com/Level/encoding-down encoding-down}, which is a\n   * codec framework for leveldb.  CBOR is a particularly convenient format for\n   * both keys and values, as it can deal with a lot of types that JSON can't\n   * handle without losing type information.\n   *\n   * @example\n   * const level = require('level')\n   * const cbor = require('cbor')\n   *\n   * async function putget() {\n   *   const db = level('./db', {\n   *     keyEncoding: cbor.leveldb,\n   *     valueEncoding: cbor.leveldb,\n   *   })\n   *\n   *   await db.put({a: 1}, 9857298342094820394820394820398234092834n)\n   *   const val = await db.get({a: 1})\n   * }\n   */\n  leveldb: {\n    decode: Decoder.decodeFirstSync,\n    encode: Encoder.encode,\n    buffer: true,\n    name: 'cbor',\n  },\n\n  /**\n   * Reset everything that we can predict a plugin might have altered in good\n   * faith.  For now that includes the default set of tags that decoding and\n   * encoding will use.\n   */\n  reset() {\n    Encoder.reset()\n    Tagged.reset()\n  },\n}\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,SAAS,GAAGC,OAAO,CAAC,aAAa,CAAC;AACxC,MAAMC,QAAQ,GAAGD,OAAO,CAAC,YAAY,CAAC;AACtC,MAAME,OAAO,GAAGF,OAAO,CAAC,WAAW,CAAC;AACpC,MAAMG,OAAO,GAAGH,OAAO,CAAC,WAAW,CAAC;AACpC,MAAMI,MAAM,GAAGJ,OAAO,CAAC,UAAU,CAAC;AAClC,MAAMK,MAAM,GAAGL,OAAO,CAAC,UAAU,CAAC;AAClC,MAAMM,GAAG,GAAGN,OAAO,CAAC,OAAO,CAAC;AAC5B,MAAMO,kBAAkB,GAAGP,OAAO,CAAC,sBAAsB,CAAC;AAE1DQ,MAAM,CAACC,OAAO,GAAG;EACfV,SAAS;EACTE,QAAQ;EACRC,OAAO;EACPC,OAAO;EACPC,MAAM;EACNC,MAAM;EACNC,GAAG;EACHC,kBAAkB;EAElB;AACF;AACA;EACEG,OAAO,EAAEX,SAAS,CAACW,OAAO;EAE1B;AACF;AACA;EACEC,SAAS,EAAET,OAAO,CAACS,SAAS;EAE5B;AACF;AACA;EACEC,WAAW,EAAEV,OAAO,CAACU,WAAW;EAEhC;AACF;AACA;EACEC,aAAa,EAAEX,OAAO,CAACW,aAAa;EAEpC;AACF;AACA;EACEC,eAAe,EAAEZ,OAAO,CAACY,eAAe;EAExC;AACF;AACA;EACEC,QAAQ,EAAEd,QAAQ,CAACc,QAAQ;EAE3B;AACF;AACA;EACEC,MAAM,EAAEb,OAAO,CAACa,MAAM;EAEtB;AACF;AACA;EACEC,eAAe,EAAEd,OAAO,CAACc,eAAe;EAExC;AACF;AACA;EACEC,SAAS,EAAEf,OAAO,CAACe,SAAS;EAE5B;AACF;AACA;EACEC,WAAW,EAAEhB,OAAO,CAACgB,WAAW;EAEhC;AACF;AACA;EACEC,MAAM,EAAElB,OAAO,CAACY,eAAe;EAE/B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEO,OAAO,EAAE;IACPD,MAAM,EAAElB,OAAO,CAACY,eAAe;IAC/BE,MAAM,EAAEb,OAAO,CAACa,MAAM;IACtBM,MAAM,EAAE,IAAI;IACZC,IAAI,EAAE;EACR,CAAC;EAED;AACF;AACA;AACA;AACA;EACEC,KAAKA,CAAA,EAAG;IACNrB,OAAO,CAACqB,KAAK,CAAC,CAAC;IACfnB,MAAM,CAACmB,KAAK,CAAC,CAAC;EAChB;AACF,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}