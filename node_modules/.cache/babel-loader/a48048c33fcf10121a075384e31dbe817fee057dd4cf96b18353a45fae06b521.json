{"ast":null,"code":"var _jsxFileName = \"/Users/peterchen/Dropbox/Hexlink/pwa-demo/src/layouts/register.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport CreatePassKeyCredential from \"utils/passkey/register/createPasskeyCredential\";\nimport validatePassKeyCreation from \"utils/passkey/register/validatePassKeyCreation\";\nimport { Container, SignInButton, Copy, UserName } from \"components/shared\";\nimport { useDispatch } from \"react-redux\";\nimport { addUserAccount } from \"redux-functionality/slices/userAccountsSlice\";\nimport generateRandomString from \"utils/generators/randomString\";\nimport { decode } from \"utils/passkey/shared/cbor\";\nimport { parseAuthData } from \"utils/passkey/shared/parseAuthData\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// markup\nconst Register = ({\n  onRegister,\n  onReturnToSignIn\n}) => {\n  _s();\n  const dispatch = useDispatch();\n  const [login, setLogin] = useState(localStorage.getItem('login') || '');\n  const [username, setUsername] = useState(\"\");\n  // const [displayName, setDisplayName] = useState<string>(\"\");\n\n  const onUserNameChanged = ev => {\n    setUsername(ev.target.value);\n    setLogin(ev.target.value);\n  };\n\n  // const onDisplayNameChanged = (ev: React.ChangeEvent<HTMLInputElement>) => {\n  //   setDisplayName(ev.target.value);\n  // };\n\n  const createPassKey = async () => {\n    // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n    // MARK: THIS SHOULD BE DONE ON THE BACKEND\n    // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n    const userId = generateRandomString(16);\n    console.log(\"✅  Created userId : \", userId);\n    // rXfCD86r4OHTMk0j\n    const challengeBufferString = generateRandomString(16);\n    console.log(\"✅ Created challengeBufferString : \", challengeBufferString);\n    // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n    /* MARK: THIS SHOULD BE DONE IF AN ACCOUNT IS VALID \n             AND THE CHALLENGE BUFFER AND USERID SHOULD BE PASSED\n             FROM THE RETURN CALL IN THE SERVER\n    */\n    // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n    try {\n      const credential = await CreatePassKeyCredential(username.toLowerCase(), challengeBufferString, userId);\n      console.log(\"✅ Created Pass Key Credential ! \");\n      if (credential) {\n        var _authData$parsedCrede, _authData$parsedCrede2;\n        // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n        // MARK: THIS SHOULD BE DONE ON THE BACKEND\n        // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n        console.log(\"✅ Credential is not null : \", credential);\n\n        // @ts-ignore\n        const attestationObject = decode(credential.response.attestationObject);\n        console.log(\"🔥 \", attestationObject);\n        console.log(\"attestationObject.authData: \", attestationObject.authData);\n        const authData = parseAuthData(attestationObject.authData);\n        console.log(\"authData: \", authData);\n        console.log(\"public key x: \", (_authData$parsedCrede = authData.parsedCredentialPublicKey) === null || _authData$parsedCrede === void 0 ? void 0 : _authData$parsedCrede.x);\n        console.log(\"public key y: \", (_authData$parsedCrede2 = authData.parsedCredentialPublicKey) === null || _authData$parsedCrede2 === void 0 ? void 0 : _authData$parsedCrede2.y);\n\n        // Validate PassKey Creation\n        const challenge = validatePassKeyCreation(credential);\n        switch (challenge) {\n          case null:\n            console.log(\"❌ PassKey verification failed.\");\n            return;\n          default:\n            console.log(\"✅ PassKey verification passed with challenge : \", challenge);\n            // Save the user account data.\n            // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n            // MARK: THIS SHOULD BE SAVED TO YOUR BACKEND DATABASE\n            // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n            dispatch(addUserAccount({\n              userId: userId,\n              username: username,\n              displayName: username,\n              challengeBuffer: challengeBufferString,\n              challenge: challenge\n            }));\n            localStorage.setItem(`${login}_challengeBuffer`, challengeBufferString);\n            localStorage.setItem(`${login}_challenge`, challenge);\n            localStorage.setItem(`${login}_userId`, userId);\n            onRegister();\n            break;\n        }\n        // @ts-ignore\n        localStorage.setItem(`${login}_passkeyId`, credential.id);\n      } else {\n        console.log(\"❌ Credential does not exist.\");\n      }\n    } catch (error) {\n      console.log(\"❌ Error creating credential\");\n      // Session Timed Out\n      console.log(\"ERROR : \", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(UserName, {\n      placeholder: \"Please enter your email\",\n      type: \"text\",\n      autoComplete: \"username webauthn\",\n      value: username,\n      onChange: onUserNameChanged\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SignInButton, {\n      onClick: createPassKey,\n      children: \" Register\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Copy, {\n      children: \"Already have an account ?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SignInButton, {\n      onClick: onReturnToSignIn,\n      children: \"Sign In\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 5\n  }, this);\n};\n_s(Register, \"QVAQoIRyJ85p9BKO65gKFTsJsrA=\", false, function () {\n  return [useDispatch];\n});\n_c = Register;\nexport default Register;\nvar _c;\n$RefreshReg$(_c, \"Register\");","map":{"version":3,"names":["React","useState","CreatePassKeyCredential","validatePassKeyCreation","Container","SignInButton","Copy","UserName","useDispatch","addUserAccount","generateRandomString","decode","parseAuthData","jsxDEV","_jsxDEV","Register","onRegister","onReturnToSignIn","_s","dispatch","login","setLogin","localStorage","getItem","username","setUsername","onUserNameChanged","ev","target","value","createPassKey","userId","console","log","challengeBufferString","credential","toLowerCase","_authData$parsedCrede","_authData$parsedCrede2","attestationObject","response","authData","parsedCredentialPublicKey","x","y","challenge","displayName","challengeBuffer","setItem","id","error","children","placeholder","type","autoComplete","onChange","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/peterchen/Dropbox/Hexlink/pwa-demo/src/layouts/register.tsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport CreatePassKeyCredential from \"utils/passkey/register/createPasskeyCredential\";\nimport validatePassKeyCreation from \"utils/passkey/register/validatePassKeyCreation\";\nimport { Container, SignInButton, Copy, UserName } from \"components/shared\";\nimport { useDispatch } from \"react-redux\";\nimport { addUserAccount } from \"redux-functionality/slices/userAccountsSlice\";\nimport * as base64url from \"../utils/passkey/shared/base64url-arraybuffer\";\nimport generateRandomString from \"utils/generators/randomString\";\nimport { encode, decode } from \"utils/passkey/shared/cbor\";\nimport { parseAuthData } from \"utils/passkey/shared/parseAuthData\";\n\ninterface Props {\n  onRegister: () => void;\n  onReturnToSignIn: () => void;\n}\n\n// markup\nconst Register = ({ onRegister, onReturnToSignIn }: Props) => {\n  const dispatch = useDispatch();\n  const [login, setLogin] = useState(localStorage.getItem('login') || '');\n  const [username, setUsername] = useState<string>(\"\");\n  // const [displayName, setDisplayName] = useState<string>(\"\");\n\n  const onUserNameChanged = (ev: React.ChangeEvent<HTMLInputElement>) => {\n    setUsername(ev.target.value);\n    setLogin(ev.target.value);\n  };\n\n  // const onDisplayNameChanged = (ev: React.ChangeEvent<HTMLInputElement>) => {\n  //   setDisplayName(ev.target.value);\n  // };\n\n  const createPassKey = async () => {\n    // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n    // MARK: THIS SHOULD BE DONE ON THE BACKEND\n    // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n    const userId = generateRandomString(16);\n    console.log(\"✅  Created userId : \", userId);\n    // rXfCD86r4OHTMk0j\n    const challengeBufferString = generateRandomString(16);\n    console.log(\"✅ Created challengeBufferString : \", challengeBufferString);\n    // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n    /* MARK: THIS SHOULD BE DONE IF AN ACCOUNT IS VALID \n             AND THE CHALLENGE BUFFER AND USERID SHOULD BE PASSED\n             FROM THE RETURN CALL IN THE SERVER\n    */\n    // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n    try {\n      const credential = await CreatePassKeyCredential(\n        username.toLowerCase(),\n        challengeBufferString,\n        userId\n      );\n      console.log(\"✅ Created Pass Key Credential ! \");\n\n      if (credential) {\n        // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n        // MARK: THIS SHOULD BE DONE ON THE BACKEND\n        // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n        console.log(\"✅ Credential is not null : \", credential);\n        \n        // @ts-ignore\n        const attestationObject = decode(credential.response.attestationObject);\n        console.log(\"🔥 \", attestationObject);\n        console.log(\"attestationObject.authData: \", attestationObject.authData);\n        const authData = parseAuthData(attestationObject.authData);\n        console.log(\"authData: \", authData);\n        console.log(\"public key x: \", authData.parsedCredentialPublicKey?.x);\n        console.log(\"public key y: \", authData.parsedCredentialPublicKey?.y);\n\n        // Validate PassKey Creation\n        const challenge = validatePassKeyCreation(credential);\n        switch (challenge) {\n          case null:\n            console.log(\"❌ PassKey verification failed.\");\n            return;\n          default:\n            console.log(\n              \"✅ PassKey verification passed with challenge : \",\n              challenge\n            );\n            // Save the user account data.\n            // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n            // MARK: THIS SHOULD BE SAVED TO YOUR BACKEND DATABASE\n            // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n            dispatch(\n              addUserAccount({\n                userId: userId,\n                username: username,\n                displayName: username,\n                challengeBuffer: challengeBufferString,\n                challenge: challenge,\n              })\n            );\n            localStorage.setItem(`${login}_challengeBuffer`, challengeBufferString);\n            localStorage.setItem(`${login}_challenge`, challenge);\n            localStorage.setItem(`${login}_userId`, userId);\n            onRegister();\n            break;\n        }\n        // @ts-ignore\n        localStorage.setItem(`${login}_passkeyId`, credential.id);\n      } else {\n        console.log(\"❌ Credential does not exist.\");\n      }\n    } catch (error) {\n      console.log(\"❌ Error creating credential\");\n      // Session Timed Out\n      console.log(\"ERROR : \", error);\n    }\n  };\n\n  return (\n    <Container>\n      <UserName\n        placeholder={\"Please enter your email\"}\n        type={\"text\"}\n        autoComplete={\"username webauthn\"}\n        value={username}\n        onChange={onUserNameChanged}\n      />\n      {/* <UserName\n        placeholder={\"What should we call you?\"}\n        type={\"text\"}\n        value={displayName}\n        onChange={onDisplayNameChanged}\n      /> */}\n      <SignInButton onClick={createPassKey}> Register</SignInButton>\n      <Copy>Already have an account ?</Copy>\n      <SignInButton onClick={onReturnToSignIn}>Sign In</SignInButton>\n    </Container>\n  );\n};\n\nexport default Register;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}