{"ast":null,"code":"import { UpdateUserAccountsAction } from \"types/redux/userAccount\";\nimport { createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  accounts: []\n};\nexport const userAccountsSlice = createSlice({\n  name: UpdateUserAccountsAction,\n  initialState: initialState,\n  reducers: {\n    addUserAccount: (state, action) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      var userAccounts = state.accounts;\n      userAccounts.push(action.payload);\n      state.accounts = userAccounts;\n    }\n  }\n}); // Action creators are generated for each case reducer function\n\nexport const {\n  addUserAccount\n} = userAccountsSlice.actions; // You must export the reducer as follows for it to be able to be read by the store.\n\nexport default userAccountsSlice.reducer;","map":{"version":3,"names":["UpdateUserAccountsAction","createSlice","initialState","accounts","userAccountsSlice","name","reducers","addUserAccount","state","action","userAccounts","push","payload","actions","reducer"],"sources":["/Users/peterchen/Dropbox/Hexlink/pwa-demo/src/redux-functionality/slices/userAccountsSlice.tsx"],"sourcesContent":["import InitialState, {\n  UpdateUserAccountsAction,\n} from \"types/redux/userAccount\";\nimport PasskeyAuthentication from \"types/passkey/userAccount\";\n\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\nconst initialState: InitialState = {\n  accounts: [],\n};\n\nexport const userAccountsSlice = createSlice({\n  name: UpdateUserAccountsAction,\n  initialState: initialState,\n  reducers: {\n    addUserAccount: (state, action: PayloadAction<PasskeyAuthentication>) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      var userAccounts = state.accounts;\n      userAccounts.push(action.payload);\n      state.accounts = userAccounts;\n    },\n  },\n});\n\n// Action creators are generated for each case reducer function\nexport const { addUserAccount } = userAccountsSlice.actions;\n// You must export the reducer as follows for it to be able to be read by the store.\nexport default userAccountsSlice.reducer;\n"],"mappings":"AAAA,SACEA,wBADF,QAEO,yBAFP;AAKA,SAASC,WAAT,QAA2C,kBAA3C;AAEA,MAAMC,YAA0B,GAAG;EACjCC,QAAQ,EAAE;AADuB,CAAnC;AAIA,OAAO,MAAMC,iBAAiB,GAAGH,WAAW,CAAC;EAC3CI,IAAI,EAAEL,wBADqC;EAE3CE,YAAY,EAAEA,YAF6B;EAG3CI,QAAQ,EAAE;IACRC,cAAc,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAyD;MACvE;MACA;MACA;MACA;MACA,IAAIC,YAAY,GAAGF,KAAK,CAACL,QAAzB;MACAO,YAAY,CAACC,IAAb,CAAkBF,MAAM,CAACG,OAAzB;MACAJ,KAAK,CAACL,QAAN,GAAiBO,YAAjB;IACD;EATO;AAHiC,CAAD,CAArC,C,CAgBP;;AACA,OAAO,MAAM;EAAEH;AAAF,IAAqBH,iBAAiB,CAACS,OAA7C,C,CACP;;AACA,eAAeT,iBAAiB,CAACU,OAAjC"},"metadata":{},"sourceType":"module"}