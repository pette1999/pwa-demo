{"ast":null,"code":"const CreatePassKeyCredential = async (username, displayName, challengeBufferString, userId) => {\n  /*\n    The challenge is a buffer of randomly generated bytes with a minimum of 16 bytes. \n    This is generated on the server using a cryptographically secure random number generator. \n    By generating the challenge on the server we can prevent \"replay attacks\". \n    The authenticator will sign this along with other data.\n  */\n  const challengeBuffer = Uint8Array.from(challengeBufferString, c => c.charCodeAt(0));\n  const userIdBuffer = Uint8Array.from(userId, c => c.charCodeAt(0));\n  const publicKeyCredentialCreationOptions = {\n    challenge: challengeBuffer,\n    rp: {\n      name: \"localhost\",\n      id: \"mizu\"\n    },\n    user: {\n      id: userIdBuffer,\n      name: username,\n      displayName: displayName\n    },\n    // SUPPORT ALL PASSKEYS\n    pubKeyCredParams: [{\n      type: \"public-key\",\n      alg: -7\n    }, {\n      type: \"public-key\",\n      alg: -35\n    }, {\n      type: \"public-key\",\n      alg: -36\n    }, {\n      type: \"public-key\",\n      alg: -257\n    }, {\n      type: \"public-key\",\n      alg: -258\n    }, {\n      type: \"public-key\",\n      alg: -259\n    }, {\n      type: \"public-key\",\n      alg: -37\n    }, {\n      type: \"public-key\",\n      alg: -38\n    }, {\n      type: \"public-key\",\n      alg: -39\n    }, {\n      type: \"public-key\",\n      alg: -8\n    }],\n    timeout: 15000,\n    attestation: \"direct\"\n  };\n  console.log(\"✅  publicKeyCredentialCreationOptions : \", publicKeyCredentialCreationOptions);\n  return await navigator.credentials.create({\n    publicKey: publicKeyCredentialCreationOptions\n  });\n};\n\n_c = CreatePassKeyCredential;\nexport default CreatePassKeyCredential;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreatePassKeyCredential\");","map":{"version":3,"names":["CreatePassKeyCredential","username","displayName","challengeBufferString","userId","challengeBuffer","Uint8Array","from","c","charCodeAt","userIdBuffer","publicKeyCredentialCreationOptions","challenge","rp","name","id","user","pubKeyCredParams","type","alg","timeout","attestation","console","log","navigator","credentials","create","publicKey"],"sources":["/Users/peterchen/Dropbox/Hexlink/pwa-demo/src/utils/passkey/register/createPasskeyCredential.tsx"],"sourcesContent":["import React from \"react\";\n\nconst CreatePassKeyCredential = async (\n  username: string,\n  displayName: string,\n  challengeBufferString: string,\n  userId: string\n) => {\n  /*\n    The challenge is a buffer of randomly generated bytes with a minimum of 16 bytes. \n    This is generated on the server using a cryptographically secure random number generator. \n    By generating the challenge on the server we can prevent \"replay attacks\". \n    The authenticator will sign this along with other data.\n  */\n  const challengeBuffer = Uint8Array.from(\n    challengeBufferString as string,\n    (c) => c.charCodeAt(0)\n  );\n\n  const userIdBuffer = Uint8Array.from(userId, (c) => c.charCodeAt(0));\n\n  const publicKeyCredentialCreationOptions: PublicKeyCredentialCreationOptions =\n    {\n      challenge: challengeBuffer,\n      rp: {\n        name: \"localhost\",\n        id: \"mizu\",\n      },\n      user: {\n        id: userIdBuffer,\n        name: username,\n        displayName: displayName,\n      },\n      // SUPPORT ALL PASSKEYS\n      pubKeyCredParams: [\n        {\n          type: \"public-key\",\n          alg: -7,\n        },\n        {\n          type: \"public-key\",\n          alg: -35,\n        },\n        {\n          type: \"public-key\",\n          alg: -36,\n        },\n        {\n          type: \"public-key\",\n          alg: -257,\n        },\n        {\n          type: \"public-key\",\n          alg: -258,\n        },\n        {\n          type: \"public-key\",\n          alg: -259,\n        },\n        {\n          type: \"public-key\",\n          alg: -37,\n        },\n        {\n          type: \"public-key\",\n          alg: -38,\n        },\n        {\n          type: \"public-key\",\n          alg: -39,\n        },\n        {\n          type: \"public-key\",\n          alg: -8,\n        },\n      ],\n      timeout: 15000,\n      attestation: \"direct\",\n    };\n\n  console.log(\n    \"✅  publicKeyCredentialCreationOptions : \",\n    publicKeyCredentialCreationOptions\n  );\n\n  return await navigator.credentials.create({\n    publicKey: publicKeyCredentialCreationOptions,\n  });\n};\n\nexport default CreatePassKeyCredential;\n"],"mappings":"AAEA,MAAMA,uBAAuB,GAAG,OAC9BC,QAD8B,EAE9BC,WAF8B,EAG9BC,qBAH8B,EAI9BC,MAJ8B,KAK3B;EACH;AACF;AACA;AACA;AACA;AACA;EACE,MAAMC,eAAe,GAAGC,UAAU,CAACC,IAAX,CACtBJ,qBADsB,EAErBK,CAAD,IAAOA,CAAC,CAACC,UAAF,CAAa,CAAb,CAFe,CAAxB;EAKA,MAAMC,YAAY,GAAGJ,UAAU,CAACC,IAAX,CAAgBH,MAAhB,EAAyBI,CAAD,IAAOA,CAAC,CAACC,UAAF,CAAa,CAAb,CAA/B,CAArB;EAEA,MAAME,kCAAsE,GAC1E;IACEC,SAAS,EAAEP,eADb;IAEEQ,EAAE,EAAE;MACFC,IAAI,EAAE,WADJ;MAEFC,EAAE,EAAE;IAFF,CAFN;IAMEC,IAAI,EAAE;MACJD,EAAE,EAAEL,YADA;MAEJI,IAAI,EAAEb,QAFF;MAGJC,WAAW,EAAEA;IAHT,CANR;IAWE;IACAe,gBAAgB,EAAE,CAChB;MACEC,IAAI,EAAE,YADR;MAEEC,GAAG,EAAE,CAAC;IAFR,CADgB,EAKhB;MACED,IAAI,EAAE,YADR;MAEEC,GAAG,EAAE,CAAC;IAFR,CALgB,EAShB;MACED,IAAI,EAAE,YADR;MAEEC,GAAG,EAAE,CAAC;IAFR,CATgB,EAahB;MACED,IAAI,EAAE,YADR;MAEEC,GAAG,EAAE,CAAC;IAFR,CAbgB,EAiBhB;MACED,IAAI,EAAE,YADR;MAEEC,GAAG,EAAE,CAAC;IAFR,CAjBgB,EAqBhB;MACED,IAAI,EAAE,YADR;MAEEC,GAAG,EAAE,CAAC;IAFR,CArBgB,EAyBhB;MACED,IAAI,EAAE,YADR;MAEEC,GAAG,EAAE,CAAC;IAFR,CAzBgB,EA6BhB;MACED,IAAI,EAAE,YADR;MAEEC,GAAG,EAAE,CAAC;IAFR,CA7BgB,EAiChB;MACED,IAAI,EAAE,YADR;MAEEC,GAAG,EAAE,CAAC;IAFR,CAjCgB,EAqChB;MACED,IAAI,EAAE,YADR;MAEEC,GAAG,EAAE,CAAC;IAFR,CArCgB,CAZpB;IAsDEC,OAAO,EAAE,KAtDX;IAuDEC,WAAW,EAAE;EAvDf,CADF;EA2DAC,OAAO,CAACC,GAAR,CACE,0CADF,EAEEZ,kCAFF;EAKA,OAAO,MAAMa,SAAS,CAACC,WAAV,CAAsBC,MAAtB,CAA6B;IACxCC,SAAS,EAAEhB;EAD6B,CAA7B,CAAb;AAGD,CAtFD;;KAAMX,uB;AAwFN,eAAeA,uBAAf"},"metadata":{},"sourceType":"module"}