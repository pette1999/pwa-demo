{"ast":null,"code":"export var POW_2_24 = 5.960464477539063e-8,\n  POW_2_32 = 4294967296,\n  POW_2_53 = 9007199254740992;\nexport function encode(value) {\n  var data = new ArrayBuffer(256);\n  var dataView = new DataView(data);\n  var lastLength;\n  var offset = 0;\n  function prepareWrite(length) {\n    var newByteLength = data.byteLength;\n    var requiredLength = offset + length;\n    while (newByteLength < requiredLength) newByteLength <<= 1;\n    if (newByteLength !== data.byteLength) {\n      var oldDataView = dataView;\n      data = new ArrayBuffer(newByteLength);\n      dataView = new DataView(data);\n      var uint32count = offset + 3 >> 2;\n      for (var i = 0; i < uint32count; ++i) dataView.setUint32(i << 2, oldDataView.getUint32(i << 2));\n    }\n    lastLength = length;\n    return dataView;\n  }\n  function commitWrite() {\n    offset += lastLength;\n  }\n  function writeFloat64(value) {\n    commitWrite();\n    prepareWrite(8).setFloat64(offset, value);\n  }\n  function writeUint8(value) {\n    commitWrite();\n    prepareWrite(1).setUint8(offset, value);\n  }\n  function writeUint8Array(value) {\n    var dataView = prepareWrite(value.length);\n    for (var i = 0; i < value.length; ++i) dataView.setUint8(offset + i, value[i]);\n    commitWrite();\n  }\n  function writeUint16(value) {\n    commitWrite();\n    prepareWrite(2).setUint16(offset, value);\n  }\n  function writeUint32(value) {\n    commitWrite();\n    prepareWrite(4).setUint32(offset, value);\n  }\n  function writeUint64(value) {\n    var low = value % POW_2_32;\n    var high = (value - low) / POW_2_32;\n    var dataView = prepareWrite(8);\n    dataView.setUint32(offset, high);\n    dataView.setUint32(offset + 4, low);\n    commitWrite();\n  }\n  function writeTypeAndLength(type, length) {\n    if (length < 24) {\n      writeUint8(type << 5 | length);\n    } else if (length < 0x100) {\n      writeUint8(type << 5 | 24);\n      writeUint8(length);\n    } else if (length < 0x10000) {\n      writeUint8(type << 5 | 25);\n      writeUint16(length);\n    } else if (length < 0x100000000) {\n      writeUint8(type << 5 | 26);\n      writeUint32(length);\n    } else {\n      writeUint8(type << 5 | 27);\n      writeUint64(length);\n    }\n  }\n  function encodeItem(value) {\n    var i;\n    if (value === false) return writeUint8(0xf4);\n    if (value === true) return writeUint8(0xf5);\n    if (value === null) return writeUint8(0xf6);\n    if (value === undefined) return writeUint8(0xf7);\n    switch (typeof value) {\n      case 'number':\n        if (Math.floor(value) === value) {\n          if (0 <= value && value <= POW_2_53) return writeTypeAndLength(0, value);\n          if (-POW_2_53 <= value && value < 0) return writeTypeAndLength(1, -(value + 1));\n        }\n        writeUint8(0xfb);\n        return writeFloat64(value);\n      case 'string':\n        var utf8data = [];\n        for (i = 0; i < value.length; ++i) {\n          var charCode = value.charCodeAt(i);\n          if (charCode < 0x80) {\n            utf8data.push(charCode);\n          } else if (charCode < 0x800) {\n            utf8data.push(0xc0 | charCode >> 6);\n            utf8data.push(0x80 | charCode & 0x3f);\n          } else if (charCode < 0xd800) {\n            utf8data.push(0xe0 | charCode >> 12);\n            utf8data.push(0x80 | charCode >> 6 & 0x3f);\n            utf8data.push(0x80 | charCode & 0x3f);\n          } else {\n            charCode = (charCode & 0x3ff) << 10;\n            charCode |= value.charCodeAt(++i) & 0x3ff;\n            charCode += 0x10000;\n            utf8data.push(0xf0 | charCode >> 18);\n            utf8data.push(0x80 | charCode >> 12 & 0x3f);\n            utf8data.push(0x80 | charCode >> 6 & 0x3f);\n            utf8data.push(0x80 | charCode & 0x3f);\n          }\n        }\n        writeTypeAndLength(3, utf8data.length);\n        return writeUint8Array(utf8data);\n      default:\n        var length;\n        if (Array.isArray(value)) {\n          length = value.length;\n          writeTypeAndLength(4, length);\n          for (i = 0; i < length; ++i) encodeItem(value[i]);\n        } else if (value instanceof Uint8Array) {\n          writeTypeAndLength(2, value.length);\n          writeUint8Array(value);\n        } else {\n          var keys = Object.keys(value);\n          length = keys.length;\n          writeTypeAndLength(5, length);\n          for (i = 0; i < length; ++i) {\n            var key = keys[i];\n            encodeItem(key);\n            encodeItem(value[key]);\n          }\n        }\n    }\n  }\n  encodeItem(value);\n  if ('slice' in data) return data.slice(0, offset);\n  var ret = new ArrayBuffer(offset);\n  var retView = new DataView(ret);\n  for (var i = 0; i < offset; ++i) retView.setUint8(i, dataView.getUint8(i));\n  return ret;\n}\nexport function decode(data, tagger, simpleValue) {\n  var dataView = new DataView(data);\n  var offset = 0;\n  if (typeof tagger !== 'function') tagger = function (value) {\n    return value;\n  };\n  if (typeof simpleValue !== 'function') simpleValue = function () {\n    return undefined;\n  };\n  function commitRead(length, value) {\n    offset += length;\n    return value;\n  }\n  function readArrayBuffer(length) {\n    return commitRead(length, new Uint8Array(data, offset, length));\n  }\n  function readFloat16() {\n    var tempArrayBuffer = new ArrayBuffer(4);\n    var tempDataView = new DataView(tempArrayBuffer);\n    var value = readUint16();\n    var sign = value & 0x8000;\n    var exponent = value & 0x7c00;\n    var fraction = value & 0x03ff;\n    if (exponent === 0x7c00) exponent = 0xff << 10;else if (exponent !== 0) exponent += 127 - 15 << 10;else if (fraction !== 0) return (sign ? -1 : 1) * fraction * POW_2_24;\n    tempDataView.setUint32(0, sign << 16 | exponent << 13 | fraction << 13);\n    return tempDataView.getFloat32(0);\n  }\n  function readFloat32() {\n    return commitRead(4, dataView.getFloat32(offset));\n  }\n  function readFloat64() {\n    return commitRead(8, dataView.getFloat64(offset));\n  }\n  function readUint8() {\n    return commitRead(1, dataView.getUint8(offset));\n  }\n  function readUint16() {\n    return commitRead(2, dataView.getUint16(offset));\n  }\n  function readUint32() {\n    return commitRead(4, dataView.getUint32(offset));\n  }\n  function readUint64() {\n    return readUint32() * POW_2_32 + readUint32();\n  }\n  function readBreak() {\n    if (dataView.getUint8(offset) !== 0xff) return false;\n    offset += 1;\n    return true;\n  }\n  function readLength(additionalInformation) {\n    if (additionalInformation < 24) return additionalInformation;\n    if (additionalInformation === 24) return readUint8();\n    if (additionalInformation === 25) return readUint16();\n    if (additionalInformation === 26) return readUint32();\n    if (additionalInformation === 27) return readUint64();\n    if (additionalInformation === 31) return -1;\n    throw new Error('Invalid length encoding');\n  }\n  function readIndefiniteStringLength(majorType) {\n    var initialByte = readUint8();\n    if (initialByte === 0xff) return -1;\n    var length = readLength(initialByte & 0x1f);\n    if (length < 0 || initialByte >> 5 !== majorType) throw new Error('Invalid indefinite length element');\n    return length;\n  }\n  function appendUtf16Data(utf16data, length) {\n    for (var i = 0; i < length; ++i) {\n      var value = readUint8();\n      if (value & 0x80) {\n        if (value < 0xe0) {\n          value = (value & 0x1f) << 6 | readUint8() & 0x3f;\n          length -= 1;\n        } else if (value < 0xf0) {\n          value = (value & 0x0f) << 12 | (readUint8() & 0x3f) << 6 | readUint8() & 0x3f;\n          length -= 2;\n        } else {\n          value = (value & 0x0f) << 18 | (readUint8() & 0x3f) << 12 | (readUint8() & 0x3f) << 6 | readUint8() & 0x3f;\n          length -= 3;\n        }\n      }\n      if (value < 0x10000) {\n        utf16data.push(value);\n      } else {\n        value -= 0x10000;\n        utf16data.push(0xd800 | value >> 10);\n        utf16data.push(0xdc00 | value & 0x3ff);\n      }\n    }\n  }\n  function decodeItem() {\n    var initialByte = readUint8();\n    var majorType = initialByte >> 5;\n    var additionalInformation = initialByte & 0x1f;\n    var i;\n    var length;\n    if (majorType === 7) {\n      switch (additionalInformation) {\n        case 25:\n          return readFloat16();\n        case 26:\n          return readFloat32();\n        case 27:\n          return readFloat64();\n      }\n    }\n    length = readLength(additionalInformation);\n    if (length < 0 && (majorType < 2 || 6 < majorType)) throw new Error('Invalid length');\n    switch (majorType) {\n      case 0:\n        return length;\n      case 1:\n        return -1 - length;\n      case 2:\n        if (length < 0) {\n          var elements = [];\n          var fullArrayLength = 0;\n          while ((length = readIndefiniteStringLength(majorType)) >= 0) {\n            fullArrayLength += length;\n            elements.push(readArrayBuffer(length));\n          }\n          var fullArray = new Uint8Array(fullArrayLength);\n          var fullArrayOffset = 0;\n          for (i = 0; i < elements.length; ++i) {\n            fullArray.set(elements[i], fullArrayOffset);\n            fullArrayOffset += elements[i].length;\n          }\n          return fullArray;\n        }\n        return readArrayBuffer(length);\n      case 3:\n        var utf16data = [];\n        if (length < 0) {\n          while ((length = readIndefiniteStringLength(majorType)) >= 0) appendUtf16Data(utf16data, length);\n        } else appendUtf16Data(utf16data, length);\n        return String.fromCharCode.apply(null, utf16data);\n      case 4:\n        var retArray;\n        if (length < 0) {\n          retArray = [];\n          while (!readBreak()) retArray.push(decodeItem());\n        } else {\n          retArray = new Array(length);\n          for (i = 0; i < length; ++i) retArray[i] = decodeItem();\n        }\n        return retArray;\n      case 5:\n        var retObject = {};\n        for (i = 0; i < length || length < 0 && !readBreak(); ++i) {\n          var key = decodeItem();\n          retObject[key] = decodeItem();\n        }\n        return retObject;\n      case 6:\n        return tagger(decodeItem(), length);\n      case 7:\n        switch (length) {\n          case 20:\n            return false;\n          case 21:\n            return true;\n          case 22:\n            return null;\n          case 23:\n            return undefined;\n          default:\n            return simpleValue(length);\n        }\n    }\n  }\n  var ret = decodeItem();\n  if (offset !== data.byteLength) throw new Error('Remaining bytes');\n  return ret;\n}\nexport var obj = {\n  encode: encode,\n  decode: decode\n};","map":{"version":3,"names":["POW_2_24","POW_2_32","POW_2_53","encode","value","data","ArrayBuffer","dataView","DataView","lastLength","offset","prepareWrite","length","newByteLength","byteLength","requiredLength","oldDataView","uint32count","i","setUint32","getUint32","commitWrite","writeFloat64","setFloat64","writeUint8","setUint8","writeUint8Array","writeUint16","setUint16","writeUint32","writeUint64","low","high","writeTypeAndLength","type","encodeItem","undefined","Math","floor","utf8data","charCode","charCodeAt","push","Array","isArray","Uint8Array","keys","Object","key","slice","ret","retView","getUint8","decode","tagger","simpleValue","commitRead","readArrayBuffer","readFloat16","tempArrayBuffer","tempDataView","readUint16","sign","exponent","fraction","getFloat32","readFloat32","readFloat64","getFloat64","readUint8","getUint16","readUint32","readUint64","readBreak","readLength","additionalInformation","Error","readIndefiniteStringLength","majorType","initialByte","appendUtf16Data","utf16data","decodeItem","elements","fullArrayLength","fullArray","fullArrayOffset","set","String","fromCharCode","apply","retArray","retObject","obj"],"sources":["/Users/peterchen/Dropbox/Hexlink/pwa-demo/src/utils/passkey/shared/cbor.ts"],"sourcesContent":["export var POW_2_24 = 5.960464477539063e-8,\n  POW_2_32 = 4294967296,\n  POW_2_53 = 9007199254740992\n\nexport function encode(value: any) {\n  var data = new ArrayBuffer(256)\n  var dataView = new DataView(data)\n  var lastLength: any\n  var offset = 0\n\n  function prepareWrite(length: number) {\n    var newByteLength = data.byteLength\n    var requiredLength = offset + length\n    while (newByteLength < requiredLength) newByteLength <<= 1\n    if (newByteLength !== data.byteLength) {\n      var oldDataView = dataView\n      data = new ArrayBuffer(newByteLength)\n      dataView = new DataView(data)\n      var uint32count = (offset + 3) >> 2\n      for (var i = 0; i < uint32count; ++i)\n        dataView.setUint32(i << 2, oldDataView.getUint32(i << 2))\n    }\n\n    lastLength = length\n    return dataView\n  }\n  function commitWrite() {\n    offset += lastLength\n  }\n  function writeFloat64(value: any) {\n    commitWrite()\n    prepareWrite(8).setFloat64(offset, value)\n  }\n  function writeUint8(value: any) {\n    commitWrite()\n    prepareWrite(1).setUint8(offset, value)\n  }\n  function writeUint8Array(value: any) {\n    var dataView = prepareWrite(value.length)\n    for (var i = 0; i < value.length; ++i)\n      dataView.setUint8(offset + i, value[i])\n    commitWrite()\n  }\n  function writeUint16(value: any) {\n    commitWrite()\n    prepareWrite(2).setUint16(offset, value)\n  }\n  function writeUint32(value: any) {\n    commitWrite()\n    prepareWrite(4).setUint32(offset, value)\n  }\n  function writeUint64(value: any) {\n    var low = value % POW_2_32\n    var high = (value - low) / POW_2_32\n    var dataView = prepareWrite(8)\n    dataView.setUint32(offset, high)\n    dataView.setUint32(offset + 4, low)\n    commitWrite()\n  }\n  function writeTypeAndLength(type: any, length: any) {\n    if (length < 24) {\n      writeUint8((type << 5) | length)\n    } else if (length < 0x100) {\n      writeUint8((type << 5) | 24)\n      writeUint8(length)\n    } else if (length < 0x10000) {\n      writeUint8((type << 5) | 25)\n      writeUint16(length)\n    } else if (length < 0x100000000) {\n      writeUint8((type << 5) | 26)\n      writeUint32(length)\n    } else {\n      writeUint8((type << 5) | 27)\n      writeUint64(length)\n    }\n  }\n\n  function encodeItem(value: any) {\n    var i\n\n    if (value === false) return writeUint8(0xf4)\n    if (value === true) return writeUint8(0xf5)\n    if (value === null) return writeUint8(0xf6)\n    if (value === undefined) return writeUint8(0xf7)\n\n    switch (typeof value) {\n      case 'number':\n        if (Math.floor(value) === value) {\n          if (0 <= value && value <= POW_2_53)\n            return writeTypeAndLength(0, value)\n          if (-POW_2_53 <= value && value < 0)\n            return writeTypeAndLength(1, -(value + 1))\n        }\n        writeUint8(0xfb)\n        return writeFloat64(value)\n\n      case 'string':\n        var utf8data = []\n        for (i = 0; i < value.length; ++i) {\n          var charCode = value.charCodeAt(i)\n          if (charCode < 0x80) {\n            utf8data.push(charCode)\n          } else if (charCode < 0x800) {\n            utf8data.push(0xc0 | (charCode >> 6))\n            utf8data.push(0x80 | (charCode & 0x3f))\n          } else if (charCode < 0xd800) {\n            utf8data.push(0xe0 | (charCode >> 12))\n            utf8data.push(0x80 | ((charCode >> 6) & 0x3f))\n            utf8data.push(0x80 | (charCode & 0x3f))\n          } else {\n            charCode = (charCode & 0x3ff) << 10\n            charCode |= value.charCodeAt(++i) & 0x3ff\n            charCode += 0x10000\n\n            utf8data.push(0xf0 | (charCode >> 18))\n            utf8data.push(0x80 | ((charCode >> 12) & 0x3f))\n            utf8data.push(0x80 | ((charCode >> 6) & 0x3f))\n            utf8data.push(0x80 | (charCode & 0x3f))\n          }\n        }\n\n        writeTypeAndLength(3, utf8data.length)\n        return writeUint8Array(utf8data)\n\n      default:\n        var length\n        if (Array.isArray(value)) {\n          length = value.length\n          writeTypeAndLength(4, length)\n          for (i = 0; i < length; ++i) encodeItem(value[i])\n        } else if (value instanceof Uint8Array) {\n          writeTypeAndLength(2, value.length)\n          writeUint8Array(value)\n        } else {\n          var keys = Object.keys(value)\n          length = keys.length\n          writeTypeAndLength(5, length)\n          for (i = 0; i < length; ++i) {\n            var key = keys[i]\n            encodeItem(key)\n            encodeItem(value[key])\n          }\n        }\n    }\n  }\n\n  encodeItem(value)\n\n  if ('slice' in data) return data.slice(0, offset)\n\n  var ret = new ArrayBuffer(offset)\n  var retView = new DataView(ret)\n  for (var i = 0; i < offset; ++i) retView.setUint8(i, dataView.getUint8(i))\n  return ret\n}\n\nexport function decode(data: any, tagger?: any, simpleValue?: any) {\n  var dataView = new DataView(data)\n  var offset = 0\n\n  if (typeof tagger !== 'function')\n    tagger = function (value: any) {\n      return value\n    }\n  if (typeof simpleValue !== 'function')\n    simpleValue = function () {\n      return undefined\n    }\n\n  function commitRead(length: any, value: any) {\n    offset += length\n    return value\n  }\n  function readArrayBuffer(length: any) {\n    return commitRead(length, new Uint8Array(data, offset, length))\n  }\n  function readFloat16() {\n    var tempArrayBuffer = new ArrayBuffer(4)\n    var tempDataView = new DataView(tempArrayBuffer)\n    var value = readUint16()\n\n    var sign = value & 0x8000\n    var exponent = value & 0x7c00\n    var fraction = value & 0x03ff\n\n    if (exponent === 0x7c00) exponent = 0xff << 10\n    else if (exponent !== 0) exponent += (127 - 15) << 10\n    else if (fraction !== 0) return (sign ? -1 : 1) * fraction * POW_2_24\n\n    tempDataView.setUint32(\n      0,\n      (sign << 16) | (exponent << 13) | (fraction << 13),\n    )\n    return tempDataView.getFloat32(0)\n  }\n  function readFloat32() {\n    return commitRead(4, dataView.getFloat32(offset))\n  }\n  function readFloat64() {\n    return commitRead(8, dataView.getFloat64(offset))\n  }\n  function readUint8() {\n    return commitRead(1, dataView.getUint8(offset))\n  }\n  function readUint16() {\n    return commitRead(2, dataView.getUint16(offset))\n  }\n  function readUint32() {\n    return commitRead(4, dataView.getUint32(offset))\n  }\n  function readUint64() {\n    return readUint32() * POW_2_32 + readUint32()\n  }\n  function readBreak() {\n    if (dataView.getUint8(offset) !== 0xff) return false\n    offset += 1\n    return true\n  }\n  function readLength(additionalInformation: any) {\n    if (additionalInformation < 24) return additionalInformation\n    if (additionalInformation === 24) return readUint8()\n    if (additionalInformation === 25) return readUint16()\n    if (additionalInformation === 26) return readUint32()\n    if (additionalInformation === 27) return readUint64()\n    if (additionalInformation === 31) return -1\n    throw new Error('Invalid length encoding')\n  }\n  function readIndefiniteStringLength(majorType: any) {\n    var initialByte = readUint8()\n    if (initialByte === 0xff) return -1\n    var length = readLength(initialByte & 0x1f)\n    if (length < 0 || initialByte >> 5 !== majorType)\n      throw new Error('Invalid indefinite length element')\n    return length\n  }\n\n  function appendUtf16Data(utf16data: any, length: any) {\n    for (var i = 0; i < length; ++i) {\n      var value = readUint8()\n      if (value & 0x80) {\n        if (value < 0xe0) {\n          value = ((value & 0x1f) << 6) | (readUint8() & 0x3f)\n          length -= 1\n        } else if (value < 0xf0) {\n          value =\n            ((value & 0x0f) << 12) |\n            ((readUint8() & 0x3f) << 6) |\n            (readUint8() & 0x3f)\n          length -= 2\n        } else {\n          value =\n            ((value & 0x0f) << 18) |\n            ((readUint8() & 0x3f) << 12) |\n            ((readUint8() & 0x3f) << 6) |\n            (readUint8() & 0x3f)\n          length -= 3\n        }\n      }\n\n      if (value < 0x10000) {\n        utf16data.push(value)\n      } else {\n        value -= 0x10000\n        utf16data.push(0xd800 | (value >> 10))\n        utf16data.push(0xdc00 | (value & 0x3ff))\n      }\n    }\n  }\n\n  function decodeItem(): any {\n    var initialByte = readUint8()\n    var majorType = initialByte >> 5\n    var additionalInformation = initialByte & 0x1f\n    var i\n    var length\n\n    if (majorType === 7) {\n      switch (additionalInformation) {\n        case 25:\n          return readFloat16()\n        case 26:\n          return readFloat32()\n        case 27:\n          return readFloat64()\n      }\n    }\n\n    length = readLength(additionalInformation)\n    if (length < 0 && (majorType < 2 || 6 < majorType))\n      throw new Error('Invalid length')\n\n    switch (majorType) {\n      case 0:\n        return length\n      case 1:\n        return -1 - length\n      case 2:\n        if (length < 0) {\n          var elements = []\n          var fullArrayLength = 0\n          while ((length = readIndefiniteStringLength(majorType)) >= 0) {\n            fullArrayLength += length\n            elements.push(readArrayBuffer(length))\n          }\n          var fullArray = new Uint8Array(fullArrayLength)\n          var fullArrayOffset = 0\n          for (i = 0; i < elements.length; ++i) {\n            fullArray.set(elements[i], fullArrayOffset)\n            fullArrayOffset += elements[i].length\n          }\n          return fullArray\n        }\n        return readArrayBuffer(length)\n      case 3:\n        var utf16data: any = []\n        if (length < 0) {\n          while ((length = readIndefiniteStringLength(majorType)) >= 0)\n            appendUtf16Data(utf16data, length)\n        } else appendUtf16Data(utf16data, length)\n        return String.fromCharCode.apply(null, utf16data)\n      case 4:\n        var retArray\n        if (length < 0) {\n          retArray = []\n          while (!readBreak()) retArray.push(decodeItem())\n        } else {\n          retArray = new Array(length)\n          for (i = 0; i < length; ++i) retArray[i] = decodeItem()\n        }\n        return retArray\n      case 5:\n        var retObject: any = {}\n        for (i = 0; i < length || (length < 0 && !readBreak()); ++i) {\n          var key = decodeItem()\n          retObject[key] = decodeItem()\n        }\n        return retObject\n      case 6:\n        return tagger(decodeItem(), length)\n      case 7:\n        switch (length) {\n          case 20:\n            return false\n          case 21:\n            return true\n          case 22:\n            return null\n          case 23:\n            return undefined\n          default:\n            return simpleValue(length)\n        }\n    }\n  }\n\n  var ret = decodeItem()\n  if (offset !== data.byteLength) throw new Error('Remaining bytes')\n  return ret\n}\n\nexport var obj = { encode: encode, decode: decode }"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}