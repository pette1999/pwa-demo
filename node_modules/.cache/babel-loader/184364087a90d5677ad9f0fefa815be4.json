{"ast":null,"code":"var _jsxFileName = \"/Users/peterchen/Dropbox/Hexlink/pwa-demo/src/layouts/landing.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Container, SignInButton, Copy, UserName } from \"components/shared\";\nimport getPasskeyCredential from \"utils/passkey/authenticate/getPasskeyCredential\";\nimport verifyUserId from \"utils/passkey/authenticate/verifyUserId\";\nimport verifyClientData from \"utils/passkey/authenticate/verifyClientData\";\nimport { useSelector } from \"react-redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\n// markup\nconst Landing = _ref => {\n  _s();\n\n  let {\n    onRegister,\n    onSignIn\n  } = _ref;\n  const [username, setUsername] = useState(\"\");\n  const userAccounts = useSelector(state => state.userAccounts.accounts);\n\n  const onUserNameChanged = ev => {\n    setUsername(ev.target.value);\n  }; // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n  // MARK: THIS SHOULD BE DONE ON THE BACKEND\n  // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n  /*\n      This functionality gathers the user account requested,\n      this should be gathered via an API call to the backend.\n  */\n\n\n  const getUserAccount = () => {\n    if (userAccounts === undefined) {\n      return null;\n    }\n\n    const match = userAccounts.filter(item => item.username.toLowerCase() === username.toLowerCase());\n\n    if (match.length > 0) {\n      return match[0];\n    } else {\n      return null;\n    }\n  };\n\n  const performLogin = async challenge => {\n    console.log(\"⚈ ⚈ ⚈ performLogin ⚈ ⚈ ⚈\");\n\n    try {\n      const credential = await getPasskeyCredential(challenge);\n      console.log(\" performLogin ✅ credential : \", credential);\n      return credential;\n    } catch (error) {\n      console.log(\"performLogin ❌  Failed to get credential with error : \", error);\n      return null;\n    }\n  };\n\n  const signIn = async () => {\n    console.log(\"⚈ ⚈ ⚈ signIn ⚈ ⚈ ⚈\"); // Get the account related to the username.\n    // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n    // MARK: THIS SHOULD BE DONE ON THE BACKEND\n    // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n    const userAccount = getUserAccount();\n    console.log(\"⚈ ⚈ ⚈ getUserAccount ⚈ ⚈ ⚈\");\n\n    if (userAccount !== null) {\n      console.log(\"Get User Account ✅ There is a match for that username : \", userAccount); // Login with the details.\n      // This part remains on the front-end in production.\n\n      const credential = await performLogin(userAccount.challengeBuffer);\n\n      if (credential !== null) {\n        // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n        // MARK: THIS SHOULD BE DONE ON THE BACKEND\n        // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n        /*\n          This functionality confirms that theres a credentials are valid\n          and that they match the details related to the users account.\n        */\n        switch (verifyUserId(credential, userAccount.userId)) {\n          case true:\n            switch (verifyClientData(credential, userAccount)) {\n              case true:\n                console.log(\"✅ You have succesfully logged in.\");\n                onSignIn();\n                break;\n\n              case false:\n                console.log(\"❌ The challenge does not match.\");\n                break;\n            }\n\n            break;\n\n          case false:\n            break;\n        }\n      } else {\n        console.log(\" signIn ❌ Failed to perform Login as credential does not exist.\");\n      }\n    } else {\n      console.log(\" signIn ❌ There is no match for that username.\");\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(UserName, {\n      placeholder: \"Please enter your email\",\n      type: \"text\",\n      autoComplete: \"username webauthn\",\n      value: username,\n      onChange: onUserNameChanged\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SignInButton, {\n      onClick: signIn,\n      children: \" Sign In\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Copy, {\n      children: \"Not Created an Account ?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SignInButton, {\n      onClick: onRegister,\n      children: \"Register\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 120,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Landing, \"4tEiAg2yxe++nyS1ywEe1qKMeMs=\", false, function () {\n  return [useSelector];\n});\n\n_c = Landing;\nexport default Landing;\n\nvar _c;\n\n$RefreshReg$(_c, \"Landing\");","map":{"version":3,"names":["React","useState","Container","SignInButton","Copy","UserName","getPasskeyCredential","verifyUserId","verifyClientData","useSelector","Landing","onRegister","onSignIn","username","setUsername","userAccounts","state","accounts","onUserNameChanged","ev","target","value","getUserAccount","undefined","match","filter","item","toLowerCase","length","performLogin","challenge","console","log","credential","error","signIn","userAccount","challengeBuffer","userId"],"sources":["/Users/peterchen/Dropbox/Hexlink/pwa-demo/src/layouts/landing.tsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport { Container, SignInButton, Copy, UserName } from \"components/shared\";\nimport getPasskeyCredential from \"utils/passkey/authenticate/getPasskeyCredential\";\nimport parseClientData from \"utils/passkey/shared/parseClientData\";\nimport UserAccount from \"types/passkey/userAccount\";\n\nimport verifyUserId from \"utils/passkey/authenticate/verifyUserId\";\nimport verifyClientData from \"utils/passkey/authenticate/verifyClientData\";\n\nimport store, { RootState } from \"redux-functionality/index\";\nimport { useSelector } from \"react-redux\";\n\ninterface Props {\n  onRegister: () => void;\n  onSignIn: () => void;\n}\n\n// markup\nconst Landing = ({ onRegister, onSignIn }: Props) => {\n  const [username, setUsername] = useState<string>(\"\");\n\n  const userAccounts: Array<UserAccount> = useSelector(\n    (state: RootState) => state.userAccounts.accounts\n  );\n\n  const onUserNameChanged = (ev: React.ChangeEvent<HTMLInputElement>) => {\n    setUsername(ev.target.value);\n  };\n\n  // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n  // MARK: THIS SHOULD BE DONE ON THE BACKEND\n  // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n  /*\n      This functionality gathers the user account requested,\n      this should be gathered via an API call to the backend.\n  */\n\n  const getUserAccount = () => {\n    if (userAccounts === undefined) {\n      return null;\n    }\n\n    const match = userAccounts.filter(\n      (item) => item.username.toLowerCase() === username.toLowerCase()\n    );\n\n    if (match.length > 0) {\n      return match[0];\n    } else {\n      return null;\n    }\n  };\n\n  const performLogin = async (challenge: string) => {\n    console.log(\"⚈ ⚈ ⚈ performLogin ⚈ ⚈ ⚈\");\n    try {\n      const credential = await getPasskeyCredential(challenge);\n      console.log(\" performLogin ✅ credential : \", credential);\n      return credential;\n    } catch (error) {\n      console.log(\n        \"performLogin ❌  Failed to get credential with error : \",\n        error\n      );\n      return null;\n    }\n  };\n\n  const signIn = async () => {\n    console.log(\"⚈ ⚈ ⚈ signIn ⚈ ⚈ ⚈\");\n    // Get the account related to the username.\n    // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n    // MARK: THIS SHOULD BE DONE ON THE BACKEND\n    // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n    const userAccount = getUserAccount();\n    console.log(\"⚈ ⚈ ⚈ getUserAccount ⚈ ⚈ ⚈\");\n    if (userAccount !== null) {\n      console.log(\n        \"Get User Account ✅ There is a match for that username : \",\n        userAccount\n      );\n      // Login with the details.\n      // This part remains on the front-end in production.\n      const credential = await performLogin(userAccount.challengeBuffer);\n\n      if (credential !== null) {\n        // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n        // MARK: THIS SHOULD BE DONE ON THE BACKEND\n        // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n        /*\n          This functionality confirms that theres a credentials are valid\n          and that they match the details related to the users account.\n        */\n        switch (verifyUserId(credential, userAccount.userId)) {\n          case true:\n            switch (verifyClientData(credential, userAccount)) {\n              case true:\n                console.log(\"✅ You have succesfully logged in.\");\n                onSignIn();\n                break;\n              case false:\n                console.log(\"❌ The challenge does not match.\");\n                break;\n            }\n            break;\n          case false:\n            break;\n        }\n      } else {\n        console.log(\n          \" signIn ❌ Failed to perform Login as credential does not exist.\"\n        );\n      }\n    } else {\n      console.log(\" signIn ❌ There is no match for that username.\");\n    }\n  };\n\n  return (\n    <Container>\n      <UserName\n        placeholder={\"Please enter your email\"}\n        type={\"text\"}\n        autoComplete={\"username webauthn\"}\n        value={username}\n        onChange={onUserNameChanged}\n      />\n      <SignInButton onClick={signIn}> Sign In</SignInButton>\n      <Copy>Not Created an Account ?</Copy>\n      <SignInButton onClick={onRegister}>Register</SignInButton>\n    </Container>\n  );\n};\n\nexport default Landing;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}