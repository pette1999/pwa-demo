{"ast":null,"code":"var _jsxFileName = \"/Users/peterchen/Dropbox/Hexlink/pwa-demo/src/layouts/landing.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { Container, SignInButton, Copy, UserName } from \"components/shared\";\nimport getPasskeyCredential from \"utils/passkey/authenticate/getPasskeyCredential\";\nimport verifyUserId from \"utils/passkey/authenticate/verifyUserId\";\nimport verifyClientData from \"utils/passkey/authenticate/verifyClientData\";\nimport { useSelector } from \"react-redux\";\nimport * as base64url from \"../utils/passkey/shared/base64url-arraybuffer\";\nimport { authResponseToSigVerificationInput } from \"utils/passkey/shared/authResponseToSigVerificationInput\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// markup\nconst Landing = ({\n  onRegister,\n  onSignIn\n}) => {\n  _s();\n  const [username, setUsername] = useState(\"\");\n  const userAccounts = useSelector(state => state.userAccounts.accounts);\n  const onUserNameChanged = ev => {\n    setUsername(ev.target.value);\n  };\n\n  // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n  // MARK: THIS SHOULD BE DONE ON THE BACKEND\n  // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n  /*\n      This functionality gathers the user account requested,\n      this should be gathered via an API call to the backend.\n  */\n\n  const getUserAccount = () => {\n    if (userAccounts === undefined) {\n      return null;\n    }\n    console.log(\"userAccounts: \", userAccounts);\n    const match = userAccounts.filter(item => item.username.toLowerCase() === username.toLowerCase());\n    if (match.length > 0) {\n      return match[0];\n    } else {\n      return null;\n    }\n  };\n  const performLogin = async (challenge, username) => {\n    console.log(\"⚈ ⚈ ⚈ performLogin ⚈ ⚈ ⚈\");\n    try {\n      const credential = await getPasskeyCredential(challenge, username);\n      console.log(\" performLogin ✅ credential : \", credential);\n      return credential;\n    } catch (error) {\n      console.log(\"performLogin ❌  Failed to get credential with error : \", error);\n      return null;\n    }\n  };\n  const signIn = async () => {\n    console.log(\"⚈ ⚈ ⚈ signIn ⚈ ⚈ ⚈\");\n    // Get the account related to the username.\n    // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n    // MARK: THIS SHOULD BE DONE ON THE BACKEND\n    // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n    // const userAccount = getUserAccount();\n    const loginPasskeyId = localStorage.getItem(`${username}_passkeyId`);\n    const loginChallengeBuffer = localStorage.getItem(`${username}_challengeBuffer`);\n    const loginUserId = localStorage.getItem(`${username}_userId`);\n    const loginChallenge = localStorage.getItem(`${username}_challenge`);\n    console.log(\"⚈ ⚈ ⚈ getUserAccount ⚈ ⚈ ⚈\");\n    if (loginPasskeyId !== null && loginChallengeBuffer != null && loginUserId !== null && loginChallenge !== null) {\n      // console.log(\n      //   \"Get User Account ✅ There is a match for that username : \",\n      //   userAccount\n      // );\n      // Login with the details.\n      // This part remains on the front-end in production.\n      const credential = await performLogin(loginChallengeBuffer, username);\n      if (credential === null) {\n        // alert('Failed to get credential')\n        return Promise.reject(new Error(\"Failed to get credential\"));\n      }\n      if (credential !== null) {\n        console.log(\"credential: \", credential);\n        //@ts-ignore\n        const response = credential.response;\n        console.log(base64url.encode(response.clientDataJSON));\n        console.log(base64url.encode(response.authenticatorData));\n        console.log(base64url.encode(response.signature));\n        console.log(base64url.encode(response.userHandle));\n        const signatureResponse = {\n          clientDataJSON: base64url.encode(response.clientDataJSON),\n          authenticatorData: base64url.encode(response.authenticatorData),\n          signature: base64url.encode(response.signature),\n          userHandle: base64url.encode(response.userHandle)\n        };\n        const ecVerifyInputs = authResponseToSigVerificationInput({}, response);\n        console.log('verify inputs', ecVerifyInputs);\n        // const clientDataJSON = JSON.parse(arrayBufferToString(response.clientDataJSON));\n        // const authenticationData = arrayBufferToString(response.authenticatorData);\n        // const signature = base64url.decode(response.signature);\n        // console.log(\"clientDataJSON: \", clientDataJSON);\n        // console.log(\"authenticationData: \", authenticationData);\n        // console.log(\"signature: \", signature);\n\n        // const clientDataJsonRequestId = ethers.keccak256(\"0x\" + clientDataJSON.challenge);\n        // const signature = JSON.stringify(\n        //   Array.from(new Uint8Array(response.signature))\n        // )\n        // //@ts-ignore\n        // const finalSignatureWithMessage = signature.data.message.finalSignature + clientDataJsonRequestId.slice(2);\n        // const abi = AbiCoder.defaultAbiCoder();\n        // const decoded = abi.decode(\n        //   [\"uint256\", \"uint256\", \"uint256\"],\n        //   finalSignatureWithMessage\n        // );\n        // const signedMessage = decoded[2];\n        // const rHex = decoded[0].toHexString();\n        // const sHex = decoded[1].toHexString();\n        // const finalSignature = rHex + sHex.slice(2);\n\n        // console.log(finalSignature);\n        // console.log(signedMessage);\n\n        // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n        // MARK: THIS SHOULD BE DONE ON THE BACKEND\n        // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n        /*\n          This functionality confirms that theres a credentials are valid\n          and that they match the details related to the users account.\n        */\n        switch (verifyUserId(credential, loginUserId)) {\n          case true:\n            switch (verifyClientData(credential, loginChallenge)) {\n              case true:\n                console.log(\"✅ You have succesfully logged in.\");\n                onSignIn();\n                break;\n              case false:\n                console.log(\"❌ The challenge does not match.\");\n                break;\n            }\n            break;\n          case false:\n            break;\n        }\n      } else {\n        console.log(\" signIn ❌ Failed to perform Login as credential does not exist.\");\n      }\n    } else {\n      console.log(\" signIn ❌ There is no match for that username.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(UserName, {\n      placeholder: \"Please enter your email\",\n      type: \"text\",\n      autoComplete: \"username webauthn\",\n      value: username,\n      onChange: onUserNameChanged\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SignInButton, {\n      onClick: signIn,\n      children: \" Sign In\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Copy, {\n      children: \"Not Created an Account ?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SignInButton, {\n      onClick: onRegister,\n      children: \"Register\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 172,\n    columnNumber: 5\n  }, this);\n};\n_s(Landing, \"4tEiAg2yxe++nyS1ywEe1qKMeMs=\", false, function () {\n  return [useSelector];\n});\n_c = Landing;\nexport default Landing;\nvar _c;\n$RefreshReg$(_c, \"Landing\");","map":{"version":3,"names":["React","useState","Container","SignInButton","Copy","UserName","getPasskeyCredential","verifyUserId","verifyClientData","useSelector","base64url","authResponseToSigVerificationInput","jsxDEV","_jsxDEV","Landing","onRegister","onSignIn","_s","username","setUsername","userAccounts","state","accounts","onUserNameChanged","ev","target","value","getUserAccount","undefined","console","log","match","filter","item","toLowerCase","length","performLogin","challenge","credential","error","signIn","loginPasskeyId","localStorage","getItem","loginChallengeBuffer","loginUserId","loginChallenge","Promise","reject","Error","response","encode","clientDataJSON","authenticatorData","signature","userHandle","signatureResponse","ecVerifyInputs","children","placeholder","type","autoComplete","onChange","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/peterchen/Dropbox/Hexlink/pwa-demo/src/layouts/landing.tsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport { Container, SignInButton, Copy, UserName } from \"components/shared\";\nimport getPasskeyCredential from \"utils/passkey/authenticate/getPasskeyCredential\";\nimport parseClientData from \"utils/passkey/shared/parseClientData\";\nimport UserAccount from \"types/passkey/userAccount\";\nimport verifyUserId from \"utils/passkey/authenticate/verifyUserId\";\nimport verifyClientData from \"utils/passkey/authenticate/verifyClientData\";\nimport store, { RootState } from \"redux-functionality/index\";\nimport { useSelector } from \"react-redux\";\nimport { ethers, AbiCoder } from \"ethers\";\nimport arrayBufferToString from \"utils/passkey/shared/arrayBufferToString\";\nimport * as base64url from \"../utils/passkey/shared/base64url-arraybuffer\";\nimport { authResponseToSigVerificationInput } from \"utils/passkey/shared/authResponseToSigVerificationInput\";\n\ninterface Props {\n  onRegister: () => void;\n  onSignIn: () => void;\n}\n\n// markup\nconst Landing = ({ onRegister, onSignIn }: Props) => {\n  const [username, setUsername] = useState<string>(\"\");\n  \n  const userAccounts: Array<UserAccount> = useSelector(\n    (state: RootState) => state.userAccounts.accounts\n  );\n\n  const onUserNameChanged = (ev: React.ChangeEvent<HTMLInputElement>) => {\n    setUsername(ev.target.value);\n  };\n\n  // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n  // MARK: THIS SHOULD BE DONE ON THE BACKEND\n  // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n  /*\n      This functionality gathers the user account requested,\n      this should be gathered via an API call to the backend.\n  */\n\n  const getUserAccount = () => {\n    if (userAccounts === undefined) {\n      return null;\n    }\n    console.log(\"userAccounts: \", userAccounts);\n\n    const match = userAccounts.filter(\n      (item) => item.username.toLowerCase() === username.toLowerCase()\n    );\n\n    if (match.length > 0) {\n      return match[0];\n    } else {\n      return null;\n    }\n  };\n\n  const performLogin = async (challenge: string, username: string) => {\n    console.log(\"⚈ ⚈ ⚈ performLogin ⚈ ⚈ ⚈\");\n    try {\n      const credential = await getPasskeyCredential(challenge, username);\n      console.log(\" performLogin ✅ credential : \", credential);\n      return credential;\n    } catch (error) {\n      console.log(\n        \"performLogin ❌  Failed to get credential with error : \",\n        error\n      );\n      return null;\n    }\n  };\n\n  const signIn = async () => {\n    console.log(\"⚈ ⚈ ⚈ signIn ⚈ ⚈ ⚈\");\n    // Get the account related to the username.\n    // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n    // MARK: THIS SHOULD BE DONE ON THE BACKEND\n    // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n    // const userAccount = getUserAccount();\n    const loginPasskeyId = localStorage.getItem(`${username}_passkeyId`);\n    const loginChallengeBuffer = localStorage.getItem(`${username}_challengeBuffer`)\n    const loginUserId = localStorage.getItem(`${username}_userId`)\n    const loginChallenge = localStorage.getItem(`${username}_challenge`)\n    console.log(\"⚈ ⚈ ⚈ getUserAccount ⚈ ⚈ ⚈\");\n    if (loginPasskeyId !== null && loginChallengeBuffer != null && loginUserId !== null && loginChallenge !== null) {\n      // console.log(\n      //   \"Get User Account ✅ There is a match for that username : \",\n      //   userAccount\n      // );\n      // Login with the details.\n      // This part remains on the front-end in production.\n      const credential = await performLogin(loginChallengeBuffer, username);\n      if (credential === null) {\n        // alert('Failed to get credential')\n        return Promise.reject(new Error(\"Failed to get credential\"));\n      }\n      \n      if (credential !== null) {\n        console.log(\"credential: \", credential);\n        //@ts-ignore\n        const response = credential.response;\n        console.log(base64url.encode(response.clientDataJSON));\n        console.log(base64url.encode(response.authenticatorData));\n        console.log(base64url.encode(response.signature));\n        console.log(base64url.encode(response.userHandle));\n        const signatureResponse = {\n          clientDataJSON: base64url.encode(response.clientDataJSON),\n          authenticatorData: base64url.encode(response.authenticatorData),\n          signature: base64url.encode(response.signature),\n          userHandle: base64url.encode(response.userHandle),\n        }\n        const ecVerifyInputs = authResponseToSigVerificationInput({}, response);\n        console.log('verify inputs', ecVerifyInputs);\n        // const clientDataJSON = JSON.parse(arrayBufferToString(response.clientDataJSON));\n        // const authenticationData = arrayBufferToString(response.authenticatorData);\n        // const signature = base64url.decode(response.signature);\n        // console.log(\"clientDataJSON: \", clientDataJSON);\n        // console.log(\"authenticationData: \", authenticationData);\n        // console.log(\"signature: \", signature);\n\n        // const clientDataJsonRequestId = ethers.keccak256(\"0x\" + clientDataJSON.challenge);\n        // const signature = JSON.stringify(\n        //   Array.from(new Uint8Array(response.signature))\n        // )\n        // //@ts-ignore\n        // const finalSignatureWithMessage = signature.data.message.finalSignature + clientDataJsonRequestId.slice(2);\n        // const abi = AbiCoder.defaultAbiCoder();\n        // const decoded = abi.decode(\n        //   [\"uint256\", \"uint256\", \"uint256\"],\n        //   finalSignatureWithMessage\n        // );\n        // const signedMessage = decoded[2];\n        // const rHex = decoded[0].toHexString();\n        // const sHex = decoded[1].toHexString();\n        // const finalSignature = rHex + sHex.slice(2);\n\n        // console.log(finalSignature);\n        // console.log(signedMessage);\n\n        // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n        // MARK: THIS SHOULD BE DONE ON THE BACKEND\n        // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n        /*\n          This functionality confirms that theres a credentials are valid\n          and that they match the details related to the users account.\n        */\n        switch (verifyUserId(credential, loginUserId)) {\n          case true:\n            switch (verifyClientData(credential, loginChallenge)) {\n              case true:\n                console.log(\"✅ You have succesfully logged in.\");\n                onSignIn();\n                break;\n              case false:\n                console.log(\"❌ The challenge does not match.\");\n                break;\n            }\n            break;\n          case false:\n            break;\n        }\n      } else {\n        console.log(\n          \" signIn ❌ Failed to perform Login as credential does not exist.\"\n        );\n      }\n    } else {\n      console.log(\" signIn ❌ There is no match for that username.\");\n    }\n  };\n\n  return (\n    <Container>\n      <UserName\n        placeholder={\"Please enter your email\"}\n        type={\"text\"}\n        autoComplete={\"username webauthn\"}\n        value={username}\n        onChange={onUserNameChanged}\n      />\n      <SignInButton onClick={signIn}> Sign In</SignInButton>\n      <Copy>Not Created an Account ?</Copy>\n      <SignInButton onClick={onRegister}>Register</SignInButton>\n    </Container>\n  );\n};\n\nexport default Landing;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}