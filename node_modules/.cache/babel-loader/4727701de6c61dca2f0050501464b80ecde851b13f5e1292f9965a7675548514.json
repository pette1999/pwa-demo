{"ast":null,"code":"export function isConvertible(target) {\n  if (typeof target === \"function\" && target.prototype) {\n    if (target.prototype.toASN && target.prototype.fromASN) {\n      return true;\n    } else {\n      return isConvertible(target.prototype);\n    }\n  } else {\n    return !!(target && typeof target === \"object\" && \"toASN\" in target && \"fromASN\" in target);\n  }\n}\nexport function isTypeOfArray(target) {\n  var _a;\n  if (target) {\n    const proto = Object.getPrototypeOf(target);\n    if (((_a = proto === null || proto === void 0 ? void 0 : proto.prototype) === null || _a === void 0 ? void 0 : _a.constructor) === Array) {\n      return true;\n    }\n    return isTypeOfArray(proto);\n  }\n  return false;\n}\nexport function isArrayEqual(bytes1, bytes2) {\n  if (!(bytes1 && bytes2)) {\n    return false;\n  }\n  if (bytes1.byteLength !== bytes2.byteLength) {\n    return false;\n  }\n  const b1 = new Uint8Array(bytes1);\n  const b2 = new Uint8Array(bytes2);\n  for (let i = 0; i < bytes1.byteLength; i++) {\n    if (b1[i] !== b2[i]) {\n      return false;\n    }\n  }\n  return true;\n}","map":{"version":3,"names":["isConvertible","target","prototype","toASN","fromASN","isTypeOfArray","_a","proto","Object","getPrototypeOf","constructor","Array","isArrayEqual","bytes1","bytes2","byteLength","b1","Uint8Array","b2","i"],"sources":["/Users/peterchen/Dropbox/Hexlink/Projects/pwa-demo/node_modules/@peculiar/asn1-x509/node_modules/@peculiar/asn1-schema/build/es2015/helper.js"],"sourcesContent":["export function isConvertible(target) {\n    if (typeof target === \"function\" && target.prototype) {\n        if (target.prototype.toASN && target.prototype.fromASN) {\n            return true;\n        }\n        else {\n            return isConvertible(target.prototype);\n        }\n    }\n    else {\n        return !!(target && typeof target === \"object\" && \"toASN\" in target && \"fromASN\" in target);\n    }\n}\nexport function isTypeOfArray(target) {\n    var _a;\n    if (target) {\n        const proto = Object.getPrototypeOf(target);\n        if (((_a = proto === null || proto === void 0 ? void 0 : proto.prototype) === null || _a === void 0 ? void 0 : _a.constructor) === Array) {\n            return true;\n        }\n        return isTypeOfArray(proto);\n    }\n    return false;\n}\nexport function isArrayEqual(bytes1, bytes2) {\n    if (!(bytes1 && bytes2)) {\n        return false;\n    }\n    if (bytes1.byteLength !== bytes2.byteLength) {\n        return false;\n    }\n    const b1 = new Uint8Array(bytes1);\n    const b2 = new Uint8Array(bytes2);\n    for (let i = 0; i < bytes1.byteLength; i++) {\n        if (b1[i] !== b2[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n"],"mappings":"AAAA,OAAO,SAASA,aAAaA,CAACC,MAAM,EAAE;EAClC,IAAI,OAAOA,MAAM,KAAK,UAAU,IAAIA,MAAM,CAACC,SAAS,EAAE;IAClD,IAAID,MAAM,CAACC,SAAS,CAACC,KAAK,IAAIF,MAAM,CAACC,SAAS,CAACE,OAAO,EAAE;MACpD,OAAO,IAAI;IACf,CAAC,MACI;MACD,OAAOJ,aAAa,CAACC,MAAM,CAACC,SAAS,CAAC;IAC1C;EACJ,CAAC,MACI;IACD,OAAO,CAAC,EAAED,MAAM,IAAI,OAAOA,MAAM,KAAK,QAAQ,IAAI,OAAO,IAAIA,MAAM,IAAI,SAAS,IAAIA,MAAM,CAAC;EAC/F;AACJ;AACA,OAAO,SAASI,aAAaA,CAACJ,MAAM,EAAE;EAClC,IAAIK,EAAE;EACN,IAAIL,MAAM,EAAE;IACR,MAAMM,KAAK,GAAGC,MAAM,CAACC,cAAc,CAACR,MAAM,CAAC;IAC3C,IAAI,CAAC,CAACK,EAAE,GAAGC,KAAK,KAAK,IAAI,IAAIA,KAAK,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,KAAK,CAACL,SAAS,MAAM,IAAI,IAAII,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACI,WAAW,MAAMC,KAAK,EAAE;MACtI,OAAO,IAAI;IACf;IACA,OAAON,aAAa,CAACE,KAAK,CAAC;EAC/B;EACA,OAAO,KAAK;AAChB;AACA,OAAO,SAASK,YAAYA,CAACC,MAAM,EAAEC,MAAM,EAAE;EACzC,IAAI,EAAED,MAAM,IAAIC,MAAM,CAAC,EAAE;IACrB,OAAO,KAAK;EAChB;EACA,IAAID,MAAM,CAACE,UAAU,KAAKD,MAAM,CAACC,UAAU,EAAE;IACzC,OAAO,KAAK;EAChB;EACA,MAAMC,EAAE,GAAG,IAAIC,UAAU,CAACJ,MAAM,CAAC;EACjC,MAAMK,EAAE,GAAG,IAAID,UAAU,CAACH,MAAM,CAAC;EACjC,KAAK,IAAIK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,MAAM,CAACE,UAAU,EAAEI,CAAC,EAAE,EAAE;IACxC,IAAIH,EAAE,CAACG,CAAC,CAAC,KAAKD,EAAE,CAACC,CAAC,CAAC,EAAE;MACjB,OAAO,KAAK;IAChB;EACJ;EACA,OAAO,IAAI;AACf"},"metadata":{},"sourceType":"module","externalDependencies":[]}